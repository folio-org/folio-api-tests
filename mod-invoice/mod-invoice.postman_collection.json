{
	"info": {
		"_postman_id": "7963b240-73e2-4d7c-84b6-1b4e38865199",
		"name": "mod-invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "961ef6f2-f914-4cc1-b26e-d759660dcd6d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e02a1d18-f26e-4ff7-bf2a-1d8053d66147",
										"exec": [
											"pm.test(\"Preparing request to create test tenant. Tenant creation might take up to 1 minute...\", () => {",
											"    pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e2360fb-3dde-43ab-a275-a85677da8923",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - created (201) or already exists (400 with Duplicate tenant id error)\", () => {",
											"    pm.expect(pm.response.code).be.oneOf([201, 400]);",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response.text()).to.include(\"Duplicate tenant id\");",
											"        purgeMudulesData();",
											"    } else {",
											"        // All is okay, running further requests",
											"        postman.setNextRequest();",
											"    }",
											"});",
											"",
											"function purgeMudulesData() {",
											"    let utils = eval(globals.loadUtils);",
											"    let tenantBaseUrl = utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\"));",
											"    pm.sendRequest(tenantBaseUrl + \"/modules\", (err, res) => {",
											"        let modulesToDisable = null;",
											"        pm.test(\"Preparing request to disable modules if any installed before...\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res.code).to.equal(200);",
											"",
											"            modulesToDisable = res.json();",
											"            modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"            console.log(modulesToDisable);",
											"        });",
											"",
											"        if (modulesToDisable !== null) {",
											"            // In case the response indicates that there are some modules are already installed, their data have to be purged first",
											"            if (modulesToDisable.length > 0) {",
											"                pm.sendRequest({",
											"                    url: tenantBaseUrl + \"/install?purge=true\",",
											"                    method: \"POST\",",
											"                    header: {",
											"                        \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\"),",
											"                        \"Content-type\": \"application/json\"",
											"                    },",
											"                    body: JSON.stringify(modulesToDisable)",
											"                }, (error, response) => {",
											"                    pm.test(\"Purging the data for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                        pm.expect(error).to.equal(null);",
											"                        pm.expect(response).to.be.ok;",
											"                        // All the data have been purged. Now wait for a minute and run next request",
											"                        setTimeout(() => postman.setNextRequest(), 61000);",
											"                    });",
											"                });",
											"            } else {",
											"                pm.test(\"No modules to purge for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                    // Run next request",
											"                    postman.setNextRequest();",
											"                });",
											"            }",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19d07082-9a38-4c56-8321-6f01e414d466",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-invoice\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e84d1d78-82af-4507-ac0e-2071c695250f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b13b3ea-a482-4e2b-9875-07be124542b9",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7bc46062-fb83-4231-afe9-901f72d6bf2b",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94e61f80-987b-4e87-a086-5bc08a1167fc",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d50bfb7a-2cad-494e-b4ba-61ced7cf6a61",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b33e9993-1fad-4db9-8794-10128e08a7f5",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79c575ce-479c-4123-a4b9-c4ab1bad6a69",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ffffc964-f1c3-4e80-8593-31ebf7c0f9b9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ad97fb8-7f8f-49da-bfe2-f8006e4a384b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d985604c-1534-4d28-9a6d-0e2043c83f1b",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3222fc9e-de7b-422b-ac18-78e675e0bc54",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d63ca79d-2c7e-41fb-9b06-7a8efc483442",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffaeab48-1749-44dd-9185-ace4d96d89aa",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9d3cb25-5c4c-4c51-b8b0-3d50c086aa06",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f5bef40-be26-4233-bbc9-35d7d927e8b9",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add invoice permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a743651-fe0a-49d8-a6bf-5ee0ebec08d3",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02c81e18-f791-431b-8af2-33800bb91e54",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d691e9b7-8f4f-4580-9859-241f9f193b31",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "843854c5-facb-40f6-be92-363aa5eb533f",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check invoice configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc336fc0-4fe0-468e-8bf0-fb52964657d0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.invoicesConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-invoices-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
											"}",
											"// Store current version of configs",
											"pm.environment.set(\"current-invoices-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d53364b-e0cb-424c-82eb-71033ca55b39",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check orders configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "164af547-d843-435d-9334-562ad3c120a5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.ordersConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2fd575c-0bc4-46c3-a32c-1679a3f2d33b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a0427a14-63a2-4b6f-b264-275df702605d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "efc6d76e-5fd0-4d8f-8884-e0da2f0baa40",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f68232a-be86-4a81-ad61-684747966b97",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modInvoiceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25663f38-fc43-4f11-b3b4-6fd6b6ce468d",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-invoice';\r",
											"\r",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"        pm.variables.set('modInvoiceId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modInvoiceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d536973f-19a6-470b-9c1f-80f1342966aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acb5e013-fd2e-43c1-8718-eccd85e5803a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "250afd9c-b6af-4d75-a5b8-7860294d79d8",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b54d3d4b-35e1-44d2-9707-1fcacdc9ec50",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a8098a1-b63c-4fc6-8c81-0418b7f20568",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f99088c6-a3db-437c-92d3-66b48b9744ed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory data",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "584a1056-58c3-4d66-99bd-7e6d56606c22",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d6b580b-2d85-4e18-b638-1e4ce86d09b7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17f0ae99-1a1d-4e29-9d69-7ca882fe924b",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78614ca6-2a12-4cbd-bc69-7aa73f2f9703",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa849e4e-e2e6-4da6-98a2-8e1da29b0ca5",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c126a27-3589-4e80-b498-c6a6ff84913f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c16adc24-2a74-4f29-9613-154cfeeab84d",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ef5b058-76a9-42fa-bdeb-71e2a463095f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "226e94b5-92cb-44ce-8fcc-6480f5fb672d",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "933c31a8-5e6b-4ffc-8c1c-96ab9961fa74",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "FiscalYear",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6108f1d3-a593-4f59-ba18-19256b3128ff",
										"exec": [
											"pm.test(\"Fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fiscYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ff9c2ee-d52d-4162-a707-48a91782deed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"FY2019\",\n    \"name\": \"Test fiscal year\",\n    \"periodStart\": \"2019-01-01T00:00:00Z\",\n    \"periodEnd\": \"2025-12-30T23:59:59Z\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fbfa3c9-498e-4fef-b635-06f41c46e3a4",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "77a13e7c-0c31-4c45-84e9-2b7a06a83c65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n\t\"fiscalYearOneId\": \"{{fiscYearId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fe3dc34-aa4f-4a8d-9eb5-7979457d7ea0",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5883af74-5d62-4ea6-b289-cf776fb708b0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST-FND\",\n        \"description\": \"Fund for orders API Tests\",\n        \"externalAccountNo\": \"1111111111111111111111111\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fe18d5f-563f-4aac-a0aa-bae6c84ab78f",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fund2Id\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3da383ac-c841-4848-bcc8-925a9eb02d59",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST2-FND\",\n        \"description\": \"2nd Fund for orders API Tests\",\n        \"externalAccountNo\": \"2222222222222222222222222\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"2nd Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07590abf-9fec-436b-aa6c-6aa70a6141bf",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b53e90a7-a623-45dc-8a0d-cad3766b5a43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget for invoice API tests\",\n    \"fundId\": \"{{fundId}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Budget-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f22ba282-3def-4f1e-97b6-1dfa3cb4eaf9",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budget2Id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f41e5969-d702-4397-b88c-172f116301f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget 2 for invoice API tests\",\n    \"fundId\": \"{{fund2Id}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare orders",
					"item": [
						{
							"name": "Create Pending order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10f56fd0-647b-460a-8c1b-5f12904bfd0a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    delete order.poNumber;",
											"    order.compositePoLines[0].paymentStatus = \"Awaiting Payment\";",
											"    order.compositePoLines[1].paymentStatus = \"Awaiting Payment\";",
											"    // Set retrieved content for further requests",
											"    order.compositePoLines.forEach(it=>it.eresource.accessProvider = pm.environment.get(\"activeVendorId\"));",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52547eeb-bd52-4b83-9fe6-58a2ae1a2b31",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"completeOrderId\", order.id); ",
											"    pm.globals.set(\"poLine1Id\",  order.compositePoLines[0].id);",
											"    pm.globals.set(\"poLine2Id\",  order.compositePoLines[1].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load mock data",
					"item": [
						{
							"name": "Load mock invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bcb50ce-3a63-41c4-a62b-2f475a49e4cf",
										"exec": [
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91aa4437-d1c9-4323-8010-06bf176f9109",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
											"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
											"",
											"    let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
											"    invoice.note += \" - for batch-group system record delete test\";",
											"    invoice.status = \"Reviewed\";",
											"    delete invoice.adjustments;",
											"    delete invoice.voucherNumber;",
											"    delete invoice.approvalDate;",
											"    delete invoice.approvedBy;",
											"    ",
											"    pm.environment.set(\"mockInvoice\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{mockInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare invoice data",
					"item": [
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ce1df95-a8f4-4d1d-bb4a-4c036235e545",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"batchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20a233e0-dc41-4962-aa2b-4f0280e6c479",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e827bb81-01ae-4c08-8d5e-bd4a40b9ffb7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"minInvoiceId\", invoice.id);",
													"    pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    ",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c53ad321-1559-471f-9695-8130a1dbd4a5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with new vendor invoice number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "36705bc0-61ad-46fc-a280-82987c7bdc3d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    let number = \"UPD\" + invoice.vendorInvoiceNo;",
													"    invoice.vendorInvoiceNo = number;",
													"    pm.variables.set(\"updatedNumber\", number);",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd386e4a-8343-4ba5-83c2-c92bc5ed2eb1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"        pm.test(\"Verify invoice updated with new vendor invoice number\", () => {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.vendorInvoiceNo).to.equal(pm.variables.get(\"updatedNumber\"));",
													"            utils.validateInvoice(invoice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Get invoice by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36d40162-1a4f-47d5-8458-2c113dde7ff5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // Validate fields",
													"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"minInvoiceId\"));",
													"    pm.response.to.have.jsonBody(\"folioInvoiceNo\", pm.environment.get(\"folioInvoiceNo\"));",
													"",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60514071-a072-45f4-8ffd-bd78330a93dd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Filter invoices",
							"item": [
								{
									"name": "Create another invoice for filtering",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa6ed1b2-a8a8-4398-9d9c-29372f239403",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"filterInvoiceId\", invoice.id);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f9b86d0-bd77-415c-a15b-1b76c5a87f4c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
													"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
													"    let invoice = utils.prepareInvoice(res.json().invoices[1]);",
													"",
													"    invoice.note += \" - filtering\";",
													"",
													"    pm.variables.set(\"invoiceToFilterContent\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceToFilterContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6817854a-2fb6-46e9-9755-a7a18525d162",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.at.least(2);",
													"    invoices = pm.response.json().invoices;",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec376047-3808-4d8a-a0fb-41b1b5850b9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices filter by query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f556004c-0260-4fe7-9faf-42f2a4de2f6e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
													"    invoices = pm.response.json().invoices;",
													"    pm.expect(invoices[0].note).to.equal('Invoice for API Tests - filtering');",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "699f098e-1196-4c3b-bdcb-bcca9b6c3d95",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=1&query=note=\"filtering\" and note=\"Invoice for API Tests\"",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "query",
													"value": "note=\"filtering\" and note=\"Invoice for API Tests\""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Invoice and associated lines",
							"item": [
								{
									"name": "Create invoice for deletion test",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8601beb-a882-4152-82f5-62139f60f766",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.environment.set(\"InvoiceIdForDelete\", invoice.id);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "782b97e8-4450-455b-b421-2e09807094bb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceForDelete\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice line for delete with invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de47c9d1-6ccb-418b-9275-9d737bb83bb8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"InvoiceIdForDelete\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.environment.set(\"InvoiceLineIdForDelete\", invoiceLine.id);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c247673a-107c-42e0-b4a4-c90ac9f95335",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"InvoiceIdForDelete\"));",
													"",
													"pm.variables.set(\"InvoiceLineForDelete\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceLineForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete  invoice and associated lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a1640b7-352f-48fe-a2b2-2b4094b380e7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"invoce line deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"InvoiceIdForDelete\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoice-lines?query=invoiceId==\" + invoiceId , (err, response) => {",
													"        pm.expect(response).to.have.status(200);",
													"        pm.expect(response.json().invoiceLines.length).to.be.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "002d4a89-4dd2-4865-8831-e6f67b6817b6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceIdForDelete}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceIdForDelete}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Documents",
							"item": [
								{
									"name": "Create document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f2a6ad2-d3ea-4835-a8fb-965cc47b8ee8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithUrlId\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1d01e9ce-693a-4bc5-b59c-f6835bd6deba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/10a34f8a-98d1-45af-a9f6-14b7174ceb51.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocumentWithUrl = res.json();",
													"    invDocumentWithUrl.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithURL\", JSON.stringify(invDocumentWithUrl));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithURL}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d157cf2-1115-4c3a-b5eb-4c76bbf30e42",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithBase64Id\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3dae7e2d-ac0b-406b-9eab-0fb473ac4b5c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/b3ed45f1-9347-43b7-992d-519048d8041c.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocument = res.json();",
													"    invDocument.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithBase64Content\", JSON.stringify(invDocument));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithBase64Content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d108a2a8-4221-4b03-9db0-60d310882fe7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cf27d144-a746-484c-b4b0-cef7b14e457a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list by query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0fb2a05-b8b7-4513-9ec2-7123419abc85",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "795a16ca-a2e3-4dfb-a426-f5231b05549d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents?query=url<>null",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											],
											"query": [
												{
													"key": "query",
													"value": "url<>null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2537404b-dce6-4145-8def-f3e9e3a68202",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3130a8c4-eca6-4cbd-b9cc-2ffe174f0764",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac934f3b-67a9-47da-8b80-31e1080b1a69",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Docoment was deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithBase64Id\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1139b01a-7f4d-403b-851b-1d9e22302c1c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "098ba7bd-f039-44af-a0d2-7c0a3b50d181",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithUrlId\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "774fbfb3-5bf8-4666-a870-6c93456e4d49",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithUrlId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithUrlId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2cc3d90-0ac6-4b4c-a101-2a191cb6c4c4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.expect(invoice.id).to.exist;",
											"    pm.expect(invoice.folioInvoiceNo).to.exist;",
											"    pm.environment.set(\"invoiceId\", invoice.id);",
											"    ",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "397d1d00-2405-4556-ad7f-44e2769e4348",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/52fd6ec7-ddc3-4c53-bc26-2779afc27136.json\", function (err, res) {",
											"    pm.variables.set(\"invoiceContent\", JSON.stringify(utils.prepareInvoice(res.json())));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with minimal content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc60fcfe-fb2b-42f0-8dbf-b09a6e288ace",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75a8a3fe-2a51-4558-b03b-1099ccf39cd1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceId\"), (err, res) => {",
											"        utils.validateInvoiceWithMinimalContent(res.json());",
											"      ",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with invoices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aec11879-73d3-4dbc-8dc2-fe9e7c38dbb5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "220edc65-a9d6-486d-a6a0-7db42459ad56",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ac326ee-fed7-4cdd-8ba3-7581183caad2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"minInvoiceId\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a92bd947-7212-4c96-b39f-03b8f4b14ae1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"",
													"pm.variables.set(\"minContentInvoiceLine\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{minContentInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7c99ffb2-3d03-469e-968c-4b172cc9cd4c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b28290c7-3e3a-4ee3-a572-86279b97ecea",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice Line has minimal content\", function () {",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.test(\"Validate schema for invoice_line.json\", function () {",
													"    utils.validateInvoiceLine(invoiceLine);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by empty query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "edfc57df-b5b3-41c9-bdec-51c0ca841408",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0aa9fad5-fabd-43d3-b475-57c6dbd5b470",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLines = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(invoiceLines.invoiceLines).to.have.lengthOf.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a2125da9-f84c-47b7-acbe-60543753b528",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bd347ec8-5ae4-484c-8627-127f94d7e705",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var resp = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    resp = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(resp.invoiceLines).to.have.lengthOf.above(0);",
													"});",
													"",
													"pm.test(\"Validate that response contains lines with proper status\", function () {",
													"    for(var i = 0; i < resp.invoiceLines.length; i++) {",
													"    \tpm.expect(resp.invoiceLines[i].invoiceLineStatus).to.equal(\"Open\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?limit=30&query=invoiceLineStatus==Open",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											],
											"query": [
												{
													"key": "limit",
													"value": "30"
												},
												{
													"key": "query",
													"value": "invoiceLineStatus==Open"
												}
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "400267d3-7d93-4e71-a0cb-e69df575b9b8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.variables.get(\"invoiceLineId\"), function (err, res) {",
													"    pm.expect(err).to.equal(null);",
													"    let invoiceLine  = res.json();",
													"    pm.test(\"Verify updated fields\", function () {",
													"       pm.expect(res.json().description).to.equal(pm.variables.get(\"invLineDescription\"));",
													"       pm.expect(res.json().quantity).to.equal(pm.variables.get(\"invLineQuantity\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ea50418c-fece-4d54-975a-c0c3d5c21d93",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());",
													"",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"invoiceLine.description = \"Updating given description\";",
													"invoiceLine.quantity = 4;",
													"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));",
													"pm.variables.set(\"invLineDescription\",invoiceLine.description);",
													"pm.variables.set(\"invLineQuantity\",invoiceLine.quantity);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete invoice line by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e7606c4-676f-40a5-9925-b011a916f3af",
												"exec": [
													"pm.test(\"Invoice is deleted\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "adjustments",
							"item": [
								{
									"name": "Create invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c52952e-df26-4507-8aa8-a5ac33ac04dd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to include only In addition to relation\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(10.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec172aa0-9815-4f17-a1c4-518ece5bcc09",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoiceLines/e0d08448-343b-118a-8c2f-4fb50248d672.json\", function (err, res) {",
													"    let invoiceLine = res.json();",
													"    delete invoiceLine.id;",
													"    delete invoiceLine.invoiceLineNumber;",
													"    pm.globals.set(\"mock-invoiceLine\",  JSON.stringify(invoiceLine));",
													"    ",
													"    ",
													"    delete invoiceLine.adjustments;",
													"    ",
													"    invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"    invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"    let adjustment1 = utils.buildAdjustmentObject();",
													"    adjustmentsArray.push(adjustment1);",
													"",
													"    let adjustment2 = utils.buildAdjustmentObject();",
													"    adjustment2.relationToTotal = \"Included in\";",
													"    adjustmentsArray.push(adjustment2);",
													"    ",
													"    let adjustment3 = utils.buildAdjustmentObject(12.222, \"Percentage\");",
													"    adjustmentsArray.push(adjustment3);",
													"",
													"    invoiceLine.adjustments = adjustmentsArray;",
													"",
													"    pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Create invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05308e45-a8a3-47b0-858f-ced9d7b2db92",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"negativeAdjInLineId\",invoiceLine.id)",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.below(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to be negative\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(-28.21);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ca70a0c3-35a3-4d35-a0dc-b34bd74815ca",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = utils.getMockInvoiceLine();",
													"delete invoiceLine.id;",
													"delete invoiceLine.invoiceLineNumber;",
													"delete invoiceLine.adjustments;",
													"delete invoiceLine.fundDistribution;",
													"invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"let adjustment1 = utils.buildAdjustmentObject();",
													"adjustment1.value = -13.88;",
													"adjustmentsArray.push(adjustment1);",
													"",
													"let adjustment2 = utils.buildAdjustmentObject();",
													"adjustment2.value = -14.33;",
													"adjustmentsArray.push(adjustment2);",
													"",
													"invoiceLine.adjustments = adjustmentsArray;",
													"",
													" pm.environment.set(\"negativeInvoiceLineContent\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c15e9ade-1d04-487a-a298-935df5abef48",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "30c870da-20a4-4d0c-88fb-74ba84f7cd1b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"negativeInvoiceLineContent\"));",
													"invoiceLine.adjustments[0].value = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a61d5338-cc94-43a8-a699-a601060f8ad3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is successfully retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total is recalulated\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(0.67);",
													"    pm.expect(invoiceLine.total).to.equal(2.87);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "318d1c6e-a4bd-4610-93fc-b94d8e56008a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										},
										"description": "validate that the adjustments are recalculated after a PUT with adjustment values changed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with invoice lines. The invoices are used from `Invoices` tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6493b9b-f131-482c-a84f-4149202ca397",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "adc24dd2-912d-4beb-9feb-e195101a1478",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice calculated totals",
					"item": [
						{
							"name": "Create invoice with locked total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "376cb393-1ed6-4f70-922e-2e59fc5fde90",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"delete invoice.approvedBy;",
											"delete invoice.approvalDate;",
											"invoice.lockTotal = true;",
											"invoice.total = 12.34;",
											"invoice.note += \" - locked total\";",
											"invoice.status = \"Open\";",
											"",
											"invoice.adjustments = [];",
											"invoice.adjustments.push(utils.buildAdjustmentObject(10));",
											"",
											"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea0cee30-866b-44bd-acd1-c685e7ba97e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"invoiceWithLockedTotalId\", invoice.id);",
											"",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add adjustments to invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a03b4b4-bc85-4c6e-9c67-03e9591da212",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // The adjustment with fixed amount should affect adjustment total",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\"));",
											"    // The adjustment with percentage amount should not affect adjustment total now because there is no any line yet i.e. subTotal is 0",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Percentage\"));",
											"",
											"    // The adjustments with 'relationToTotal' other than 'In addition to' do not affect calculated totals",
											"    let adj1 = utils.buildAdjustmentObject(100, \"Amount\");",
											"    adj1.relationToTotal = \"Included in\";",
											"    invoice.adjustments.push(adj1);",
											"",
											"    let adj2 = utils.buildAdjustmentObject(50, \"Amount\");",
											"    adj2.relationToTotal = \"Separate from\";",
											"    invoice.adjustments.push(adj2);",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d873188f-2f94-44e8-b526-85a3ecdab363",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice without lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc86c3fc-d3ad-4542-98f6-adee81d5bab6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(35);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92e64a6e-ee17-4806-898c-ade5df573b1e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create invoice line with adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c01837ae-7966-4c8e-946a-c9cf0a3d6146",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e5a07b3-981e-4eec-b311-343ac37becc5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 54.32;",
											"",
											"let adjustment1 = utils.buildAdjustmentObject(21.35);",
											"invoiceLine.adjustments.push(adjustment1);",
											"",
											"// Should no affect calculations",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Included in\";",
											"invoiceLine.adjustments.push(adjustment2);",
											"",
											"let adjustment3 = utils.buildAdjustmentObject(-11, \"Percentage\");",
											"invoiceLine.adjustments.push(adjustment3);",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Verify invoice line totals persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f20d98ca-bc2d-44d8-af4e-bd3a2f8c2c37",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(1);",
											"    let invoiceLine = lines[0];",
											"",
											"    // validate calculated totals are persisted",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3549b97c-d545-4c65-85ee-695ab7dc0d0b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b83d9d4d-6501-42dc-8e41-96ca5cd05923",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "616dd358-0777-4cdf-aee4-9363f9ea9b96",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice with 1 line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "792cb2d4-bf7c-4e8c-a895-39d779541495",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b4104df-66ce-44c1-884c-523b22258193",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create second line with adjustment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b1e9099-e5f0-4367-b59f-9ad041b155b6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"    pm.environment.set(\"invoiceWithLockedTotalSecondInvoiceLineId\", invoiceLine.id);",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(6.65);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(15.87);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(22.52);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2bc56ed6-378f-492f-a044-8e21a215626e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 15.87;",
											"",
											"invoiceLine.adjustments.push(utils.buildAdjustmentObject(6.65));",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Verify invoice lines totals persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1031ecf3-0c31-44b8-a9e2-fe639482cf9f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(2);",
											"    lines.forEach(invoiceLine => {",
											"        // validate calculated totals are persisted",
											"        pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.be.oneOf([15.37, 6.65]);",
											"        pm.expect(invoiceLine.subTotal, \"subTotal\").to.be.oneOf([54.32, 15.87]);",
											"        pm.expect(invoiceLine.total, \"total\").to.be.oneOf([69.69, 22.52]);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0535cced-df7d-47c3-86b3-d83177ac949f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81a25b67-099d-4769-bbf8-8df41e8b32e5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.02 + 35 + 17.55);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88ebde32-dfc1-458a-922c-e07cd8e2c99e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ba39a1e-3be5-43d8-9df7-2a53b2f6aa97",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.02 + 35 + 17.55);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63c076a8-be27-4ef8-b0f0-a5efaa407f25",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Set invoice's lock total to false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0095fd0d-26ef-4acb-8f6d-1e3fc00ae44b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // Changing lock total to false to verify calculated total",
											"    invoice.lockTotal = false;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79a58136-8177-4bd1-9957-ae134d6dce17",
										"exec": [
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify invoice total is recalculated and persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f15b56-89b1-4af0-813f-41f7a9193223",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(74.57);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(144.76);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "492e3a26-8150-44f2-a1e6-9eb2bec0f8f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines and non locked total",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee22ad5c-596f-41d2-ab11-0b8bdd3bef48",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(74.57);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(144.76);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c18239b-731b-4eec-bb1a-29ad39f14d18",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Update second line removing adjustments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b4f5268b-ccee-4845-9ca5-237192987465",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.environment.get(\"invoiceWithLockedTotalSecondInvoiceLineId\"), (err, res) => {",
											"    let invoiceLine = res.json();",
											"",
											"    delete invoiceLine.adjustments;",
											"    invoiceLine.subTotal = 8.13;",
											"",
											"    pm.variables.set(\"invoiceLineUpdatedContent\", JSON.stringify(invoiceLine));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cc4bedae-0ce4-4eb6-a76e-78dfe3557114",
										"exec": [
											"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineUpdatedContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceWithLockedTotalSecondInvoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceWithLockedTotalSecondInvoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify second invoice line totals updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "936a77c7-c2d4-486c-bf11-c7d4703f9fb8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(2);",
											"    lines.forEach(invoiceLine => {",
											"        // validate calculated totals are persisted",
											"        pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.be.oneOf([15.37, 0.0]);",
											"        pm.expect(invoiceLine.subTotal, \"subTotal\").to.be.oneOf([54.32, 8.13]);",
											"        pm.expect(invoiceLine.total, \"total\").to.be.oneOf([69.69, 8.13]);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eebad6ee-92d9-451d-b024-24df126302c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21f53a29-9425-4c43-ab6d-21035b410708",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.98);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(62.45);",
											"    pm.expect(invoice.total, \"total\").to.equal(128.43);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "764d3bae-984e-4d29-8a43-b2ea2957c91f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12f33e2b-ccc4-407b-89d7-71060cd99e0b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.98);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(62.45);",
											"    pm.expect(invoice.total, \"total\").to.equal(128.43);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8eccb63b-a6e1-4286-aa4e-54dd7e7c1393",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Delete second invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b97e6c8-5582-49fc-baff-cf5658962401",
										"exec": [
											"pm.test(\"Invoice line is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithLockedTotalSecondInvoiceLineId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c33973c-a910-41d8-a928-5b3ac9f7078c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceWithLockedTotalSecondInvoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceWithLockedTotalSecondInvoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice lines for invoice - only one left",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867496a9-830f-414d-9732-166d6c721ec1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(1);",
											"    let invoiceLine = lines[0];",
											"",
											"    // validate calculated totals are persisted",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ccc7138c-3b11-428f-aef3-63d5c2cb8793",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9287fc50-7b14-4967-9d88-743a767cf7c1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(118.27);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "529f911b-7b9d-4788-a7a3-0865bfc63aed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice to check totals - by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81a80cbc-297e-4c08-a2f8-8af8f7749aec",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(118.27);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "97195d89-c701-4165-a666-746dc315c7ce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Delete  invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4326e2c3-e399-42be-94f4-cae81a907c78",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithLockedTotalId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b1770fa-193d-45bf-be38-18726968319e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice with adjustments without lines and verify adjustmentTotal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "162380ad-d87d-407b-9af2-8488f75a044e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let inv = utils.buildInvoiceWithMinContent();",
											"inv.status = \"Reviewed\";",
											"inv.adjustments = [];",
											"",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"Not prorated\"));",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"By line\"));",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"By quantity\"));",
											"",
											"pm.variables.set(\"invoiceContent\", JSON.stringify(inv));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f4bf86d8-e0a7-4185-ad4f-860ce3816e32",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"invoiceWithAdjustmentTotalId\", invoice.id);",
											"",
											"    utils.validateInvoice(invoice);",
											"",
											"    // MODINVOICE-103",
											"    // validate calculated adjustment totals: 10(Not prorate) + 10(By line) = 20 ",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(30);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(30);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Invoice with 1 prorated and 1 not prorated adjustments with no lines - adjustmentTotal should always be calculated irrespective if there are any invoiceLines or not"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id for adjustment total calculation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6a04904-6134-4096-9830-105b52a89c45",
										"exec": [
											"pm.test(\"Success response expected\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4ccb7bc-520d-4b01-b39c-727fbcc8451e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithAdjustmentTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithAdjustmentTotalId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify calculated totals of the invoice: [MODINVOICE-52](https://issues.folio.org/browse/MODINVOICE-52).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2b7e72b7-eeb3-42aa-a2ef-2c0941775d68",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1bbb4ed-720b-412b-a1df-b636d7fc205c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prorated adjustments",
					"item": [
						{
							"name": "Invoice without lines and one prorated adjustment",
							"item": [
								{
									"name": "Create invoice with percentage adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a06cb661-ba80-4017-a3c4-addc2e1df28d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let invoice = utils.prepareInvoice(utils.buildInvoiceWithMinContent(\"MODINVOICE-54\"));",
													"",
													"invoice.note += \" - prorated adjustments\";",
													"invoice.status = \"Open\";",
													"",
													"invoice.adjustments = [utils.buildAdjustmentObject(10, \"Percentage\", \"By line\")];",
													"",
													"pm.variables.set(\"invoiceContentBody\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d126a777-365e-496a-8c66-6fbc841fee24",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsId\", invoice.id);",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate totals are zero",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContentBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice without lines yet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b1b44ce-739e-47ac-8bcd-3d71b562d4a9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"One adjustment and zero totals\", function() {",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6fd5cc59-00cb-4295-85cb-2ce66466e782",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add first line",
							"item": [
								{
									"name": "Create invoice line with 1 non prorated adjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "249392c2-b9f3-402f-aaec-572091eca2d4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "13cc30f1-d48d-45b0-a780-be9ee5363585",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 100.15;",
													"invoiceLine.quantity = 5;",
													"invoiceLine.adjustments = [utils.buildAdjustmentObject(11.11)];",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f337c1d3-c049-4d0b-ad52-a839676aa05c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51130688-fd19-41b6-be3a-e0c579e05bdd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and one prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2fe574d-36d4-45ac-953b-28b16bb77774",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate totals\", function() {",
													"    // The invoice still has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "45012ede-e65c-4313-b564-5167c8943af8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b410b0-0c0e-4df2-91bb-c2905f3d1db7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df83d22b-f3d9-427b-bc55-cac5e199be88",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and two prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a52725c-1116-49d0-afe4-e22a0c40052b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // The invoice has 2 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(146.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5b955bf6-afb8-401a-b163-2fa894a88d11",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2029536-04e6-4256-9640-85e97a6fbf86",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 10% of 100.15 plus 11.11 plus 25",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(146.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c5baa339-9e69-4be9-a927-8351fbd9be9b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37af7de4-5e89-4c89-8659-1370d1a7da28",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine2WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // 2 adjustments. Total adj amount is 5% of 200.20 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.51);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(222.71);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b6d394d-35ae-471d-a558-a74f085871fa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 200.20;",
													"invoiceLine.quantity = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcbd1e95-3e48-4f60-afff-23bd3e5a4553",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 5% of 200.20 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.51);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(222.71);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1f7e7ce-d3b2-4fae-8553-dfc373bb4f5a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef55b1bb-992a-488c-b197-ab8e63e1997e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 11.11 plus 5% of 100.15 (10% devided by 2) plus 12.5 (25 devided by 2)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(28.62);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(128.77);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c7439625-c5ad-4c1e-8747-94dacade855d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60ae5f43-f877-41ee-8343-0a034312a8c3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(51.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(351.48);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "11f7274a-afe4-4d8a-b0d6-3343d0884f02",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "27219f49-4470-4b79-bdcb-bfa18b828175",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50, \"Amount\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d27475f9-3ce7-4355-95e9-ce9b2fd6516a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 3 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76858cb2-bdf3-41d7-a9a0-0531e5a91eaf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 3 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 3);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(101.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(401.48);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "320fcbe5-306d-4595-99e2-517c34ffdc88",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad132816-2d49-4ba8-919b-7e0b8f58ac53",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 100.15 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(45.29);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(145.44);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bc30c62b-b3c0-4746-9e11-224799ead832",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8d85457-5a27-493e-bc50-f67bc918fa5e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    // 3 adjustments. Total adj amount is 5% of 200.20 (10% devided by 2) plus 12.5 (25 devided by 2) plus 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(55.84);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(256.04);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2fe985f-41cd-4490-88b6-a960e833dde3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fourth prorated adjustment",
							"item": [
								{
									"name": "Add percentage adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50436f12-d4ae-4cf2-97c5-c27e8bcac345",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(5, \"Percentage\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "43a87327-0506-4d28-b712-715e7d704f50",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 4 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16550e91-fd12-4f8f-8008-1818bc04ed04",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(116.15);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(416.50);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "03dd6c8a-8022-405b-8337-33190e66bd73",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20fc87c9-276a-4fab-88e7-5b5fba9a0c84",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 100.15 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 5. 5% of 100.15 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(50.30);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(150.45);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3eeb9eaa-3c35-4ae1-8d4c-9a7c6cc5c674",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b1f5a73-cba6-4386-81e3-e97706838035",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 5% of 200.20 (10% devided by 2)",
													"     * 2. 12.5 (25 devided by 2)",
													"     * 3. 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 5% of 200.20 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.85);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(266.05);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2426e10c-e4f7-4530-a52a-3c146dc1a059",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee723ec4-235f-4b94-80ea-53095ff97ba7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsId\", invoiceLine.id);",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    invoiceLine.adjustments.forEach(adjustment => pm.expect(adjustment, \"adjustment must have id to invoice's adjustment\").to.exist);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(44.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(244.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "485ce4b8-3776-4217-ac47-9e44dbe616d0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 199.65;",
													"invoiceLine.quantity = 30;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify third line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9da87ac6-9b84-454f-9d9e-1c22b50c232e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(44.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(244.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "502dfb70-0e52-48c9-a29e-2ba3cd4ccf20",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5781e04-4629-470d-94fb-3a46c13fde51",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 3.3383333333333329995 i.e. 3.333..% (10% devided by 3) of 100.15",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.0075 i.e. 5% of 100.15 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(37.81);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(137.96);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "900a1b5b-12b0-4a6a-b128-e82a4407d674",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12577df6-5f21-4c67-b62b-449d96bb1f85",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(45.03);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(245.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a5fed69c-1625-4fef-83ec-561c00b2f11e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23cef583-ecda-4231-a763-5072f17945bb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(127.78);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(627.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "385bbc8b-7765-4bfb-a17c-41b5dec49a54",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fifth prorated adjustment",
							"item": [
								{
									"name": "Add amount adjustment prorated by quantity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2336c42f-a02a-4c14-a2b7-5ebab11a6843",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fbe6830f-507a-49b3-a2ca-ef712b4627dd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da1e81e7-4cf3-4f9c-bb50-83520b02af98",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(252.78);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(752.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "493ef4ee-22d8-4738-ad9b-cc71d68c2413",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a366c27a-fdce-40b0-9a17-602095f8a379",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 3.3383333333333329995 i.e. 3.333..% (10% devided by 3) of 100.15",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.0075 i.e. 5% of 100.15 (5% adjustment is added to each line)",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(50.31);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(150.46);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71aef9d9-cc93-4f62-94b4-234162f3a2b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "153143f8-8c9a-4852-8dd4-365b3a16c1ce",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(82.53);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(282.73);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "518ef9b7-e3ed-4ee7-975b-7d474d741443",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c7cd95f-3745-4047-8c79-52da491dad57",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(119.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(319.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aeea6d7d-387a-4d22-bef2-e478ff5b4642",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make subTotal of  first line negative",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5f766fb2-6f98-4c6a-8bbf-45f911c55283",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.subTotal = -399.85;",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4eb606a8-7941-4b2e-8124-19484871f53f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "954f8a56-a48a-439b-b6b3-61569e8942d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 13.3283333333333320005 i.e. 3.333..% (10% devided by 3) of abs(-399.85)",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 25 (portion of 50 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(90.26);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-309.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e9be6e02-cee9-4733-821e-3ff65aef0eab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e793e58-58c7-47e3-9d92-c46d09e656bf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 12.52 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(75.03);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(275.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48565fa2-80b9-4caa-904e-1607d6bc16a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a942a3a-9b9e-451c-abb1-c1132e19fb7a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 12.48 (portion of 50 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7))",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(112.46);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(312.11);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d93e320-4410-4718-abfc-3126bf558c05",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d219462e-d97c-4146-a3d6-0fa8f22049a2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(277.75);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(277.75);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "308bc8d7-3f3b-4e64-a73e-b7181e04af8b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value so that they are not evenly distributed.",
							"item": [
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45814361-95e7-4881-87a5-f5ad553b7a29",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.quantity = 11;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7a994c1b-dc12-4949-9610-dc135bf87669",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2649e95d-6d56-4732-8790-490abfcce7d8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50.05, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(26, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87df57ac-c54b-4c21-b8bd-9d75426fc301",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c5619f7-a397-42e6-b564-cbc4a75b4a81",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(278.8);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(278.8);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee2c9aba-9e82-4675-afd1-dc5e77c09e7e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddbb3754-85b7-4dab-925b-6d8385d277b6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 13.3283333333333320005 i.e. 3.333..% (10% devided by 3) of abs(-399.85)",
													"     * 3. 8.66 (26 devided by 3)",
													"     * 4. 25,02 (portion of 50,05 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 20,16 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.66);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(25.02);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(20.16);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(98.27);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-301.58);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3d9f78f-fd75-42ab-9ec4-c7851f6f976b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6539057d-f5c7-43ed-90f5-1816d23b708c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.53 (portion of 50.05 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 60,48 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(12.53);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(60.48);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(98.36);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(298.56);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "94012f2a-c72a-4beb-a6e4-63357ad7e876",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d768a464-7d1a-49d8-ba84-5b33cbadedd2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.49 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7)) + extra penny",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 44,35 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (31)) + 1 extra penny",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(12.50);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(44.36);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(82.17);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(281.82);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90786c80-6aa7-4c9c-88f5-2af3473aec3e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete second line",
							"item": [
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f27506e-66da-4d87-a64f-64d4a42f10e6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "abd41879-3bb1-46cc-b6dd-b2d9a51fdff0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06693a29-7800-4cbd-8464-3aaca18aa98f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 19.9925 i.e. 5% (10% devided by 2) of abs(-399.85)",
													"     * 3. 13 (26 devided by 2)",
													"     * 4. 33.38 (portion of 50.05 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (599.5))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 39.06 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(136.54);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-263.31);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "63d63eec-4af0-4744-99ff-3e626e476c5c",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "410b045f-c6b8-499b-b56f-c73b90761f38",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 9.9825 i.e. 5% of 199.65 (10% devided by 2) ",
													"     * 2. 13 (26 devided by 2)",
													"     * 3. 16.67 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (599.5))",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 85.94 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(135.58);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(335.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "039736de-ba6d-4032-a484-883e1817b8a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d95155d7-454d-464e-b92f-2c57e1b34ba2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(272.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(-200.20);",
													"    pm.expect(invoice.total, \"total\").to.equal(71.92);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fe51ee2b-4477-41d8-9c12-692a34dcc0dc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value negative and that they are not evenly distributed.",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a96cf175-bdb3-499f-be94-3be912313af4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"invoiceLine.adjustments = [utils.buildAdjustmentObject(11)];",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "40621fa0-737a-48c2-92d2-f7003bb2eb70",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "370b4e5c-60fa-4ea4-b535-feb6aefdc940",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6407c682-2a11-48b6-ac31-754cd2f160f2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed. Set currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ec3c2e7-0bb5-43f9-96f0-9c985e782d67",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-51, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-25, \"Amount\", \"By line\"));",
													"invoice.currency = \"JPY\";",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5b7e50c1-5419-451b-8597-1da153aafef7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1325862-4156-4c4c-8606-54177d22e54a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-150);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(250);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ea9c02ee-43cf-46a4-b244-f6fc3de1c3cc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b65f4134-7d1a-4afd-a500-2ea7bd632fec",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 not prorated adjustment",
													"     * 2. 10 i.e.5% (10% devided by 2) of abs(200)",
													"     * 3. -12 (-25 devided by 2)",
													"     * 4. -25 (portion of -51 proportionate to the invoiceLine's abs(200) contribution to the invoice subTotal by absolute value (400))",
													"     * 5. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     * 6. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-12);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-25);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-62);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-68);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(132);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cee1232a-11d7-4f7c-a626-711d0736ad0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c946ee2b-3445-445d-adec-3f55f3b26b49",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 10 i.e. 5.% of 200 (10% devided by 2) ",
													"     * 2. -12 (-25 devided by 3) - 1 extra yena",
													"     * 3. -25 (portion of -51 proportionate to the invoiceLine's contribution (200) to the invoice subTotal by absolute value (400)) - extra yena",
													"     * 4. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     * 5. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10)) - 1 extra yena",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"        pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-13);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-26);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-63);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-82);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(118);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f61c98de-b0ea-4167-a643-6f8833ad2a05",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "53c903e3-787f-4617-a9b2-8687632d4a43",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e941f425-6039-4ecf-9109-05b7cbedea8a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove prorated adjustments with amount value",
							"item": [
								{
									"name": "Update invoice leaving only percentage prorated adjustments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f5aabe3d-7515-466a-972e-aa38330b0e5f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b30dce1a-4419-4a89-98e7-1ee7a13423b1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9526049-0cc3-4836-a679-2335c091487c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(51);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(451);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7b7124b5-31e7-4c76-b3a9-e147d75f0126",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92b379c9-d782-44f0-8534-ece326e6653e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 (non prorated adjustment)",
													"     * 2. 10 i.e. 5% (10% devided by 2) of abs(200)",
													"     * 3. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(31);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(231);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f22ced19-a93b-4590-8ec7-bde86c021cd2",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae698a8d-5b51-4955-85cf-d4b325cce6e7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 10 i.e. 5% of 200 (10% devided by 2) ",
													"     * 2. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(20);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(220);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1406ffed-614d-4165-9222-b414298fe59a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete  invoice with prorated adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a839d70e-d763-4fc6-8bb3-f0e31077112a",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine2WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine3WithProratedAdjustmentsId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2c0a459-c3a5-4b7b-8c66-7264d069ed35",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithProratedAdjustmentsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b506fcc6-4f12-49ce-bac6-d8a5e84f7eb0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Voucher\", function () {",
											"    pm.response.to.have.status(200);",
											"    voucher = pm.response.json();",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    utils.validateVoucher(voucher);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "993e37c4-5567-4798-aced-1aab043df2ff",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/vouchers/vouchers.json\", function (err, res) {",
											"    let voucher = res.json().vouchers[0];",
											"    voucher.invoiceId = pm.environment.get(\"minInvoiceId\");",
											"    delete voucher.id;",
											"    delete voucher.metadata;",
											"    voucher.voucherNumber = \"APITESTS\";",
											"    ",
											"  utils.sendPostRequest(\"/voucher-storage/vouchers\", voucher, function(err,response){",
											"      pm.test(\"voucher is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"voucherId\", response.json().id);",
											"      });",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get vouchers and filter by query param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a92353b-058a-4486-a556-ee16c85f8730",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let vouchers = [];",
											"",
											"pm.test(\"Successfully get Vouchers\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    vouchers = pm.response.json().vouchers;",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    vouchers.forEach(voucher => utils.validateVoucher(voucher));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b0dc2f7-2883-4032-9a4e-1e33e68aaf91",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers?query=voucherNumber=APITESTS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers"
									],
									"query": [
										{
											"key": "query",
											"value": "voucherNumber=APITESTS"
										}
									]
								},
								"description": "The test gets list of voucher"
							},
							"response": []
						},
						{
							"name": "Edit voucher editable fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51dc2f09-1f64-481d-b06b-a9aa72f787db",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => utils.validateVoucher(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6d494f4-5633-4fd9-abd0-13c9af33f03f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify editable fields",
											"    voucher.voucherNumber = \"APITESTS123\";",
											"    voucher.disbursementNumber = \"EFT123456\";",
											"    voucher.disbursementDate = \"2020-05-05T00:00:00.000+0000\";",
											"    voucher.disbursementAmount = 4.0;",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c349bebb-e88b-4b28-b367-ef701d3d99f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bca6d1dc-1dce-4b99-b061-382343f20706",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Get batch voucher by id JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12121efb-57d0-4ae0-865f-2628c727cca5",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02227b52-c566-40ee-97ba-5aceccd6814b",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get batch voucher by id XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dd43dc8-89d0-489d-9cb6-808b3d877e69",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(200);",
											"    let jsonData = xml2Json(pm.response.body);",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/xml\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b079d1f5-790f-46dd-8a52-4e828140fb28",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "089f06a0-ef29-4bee-8826-85d225ff9c4d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eac98965-f0e4-4a2b-88cd-e006a9ba07ca",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Get voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4aa790e5-0e16-4ad5-926c-a7484d4ba091",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/voucherLines/voucher_lines.json\", function (err, res) {",
													"    let voucherLine = res.json().voucherLines[0];",
													"    voucherLine.voucherId = pm.environment.get(\"voucherId\");",
													"    delete voucherLine.id;",
													"    ",
													"  utils.sendPostRequest(\"/voucher-storage/voucher-lines\", voucherLine, function(err,response){",
													"      pm.test(\"voucherLine is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"voucherLineId\", response.json().id);",
													"      });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "82692630-8861-4604-b0f4-6f9ae67fe803",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Successfully get Voucher line\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucher = pm.response.json();",
													"});",
													"",
													"pm.test(\"Voucher line content is valid\", function() {",
													"    utils.validateVoucherLine(voucher);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f444f215-9c45-407e-8bfe-7b52267a0917",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1fb4a5aa-1d5f-4650-858b-43cf2a7b0dba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2db8008-4c5a-4bdb-a9b3-27583ddcf739",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "02a225cf-7152-404d-b5e0-5fd87bc90407",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function() {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});",
													"",
													"pm.test(\"Voucher line response is valid\", function() {",
													"    voucherLines.voucherLines.forEach(vLine => {",
													"        pm.expect(vLine.amount).to.be.above(30);",
													"        utils.validateVoucherLine(vLine);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=amount>/number 30",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											],
											"query": [
												{
													"key": "query",
													"value": "amount>/number 30"
												}
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e3a377a-5627-45b4-b5fe-2b81f4532ce9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Voucher line and update voucherLineAmount only (MODINVOICE-40)",
													"utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"    let voucherLine  = res.json();",
													"    let updatedVoucherLineAmount = 10.00;",
													"    voucherLine.amount = updatedVoucherLineAmount;",
													"    pm.variables.set(\"updatedVoucherLineAmount\", updatedVoucherLineAmount);",
													"    pm.variables.set(\"updatedVoucherLine\", JSON.stringify(voucherLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "86d9d584-d8f7-45e3-a98d-9f93370f20de",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeeded",
													"    utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"        pm.test(\"Verify voucher line updated with new VoucherLine Amount\", () => pm.expect(res.json().amount).to.equal(pm.variables.get(\"updatedVoucherLineAmount\")));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedVoucherLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with voucher lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9cc92d9d-6f69-4815-9642-86ed55a91d5b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5b024fe-7f0d-4302-862d-df5d6b082214",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(set) current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b6b437f-652f-40bb-b094-de967d5f0d04",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0edd4a4-0aa1-4129-bbfa-defbc22073ad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully re(set) voucher start value\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08334476-ce7f-4d9f-a1f5-75803650c16b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f6fcb3c-f6db-4219-99f8-21e34d47b28f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully got voucher start value\", function () {",
											"    pm.response.to.have.status(200);",
											"    utils.validateSequenceNumber(pm.response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with voucher number configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f15a5319-9483-4d10-849c-2d858734fd03",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2a1588f-c490-4656-82bc-a716f7e58019",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Workflows with configs",
							"item": [
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice with 4 lines, 2 of lines have negative total",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "25b01815-8f0c-4da6-b34e-62014aaab59b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"workflow-invoiceWith4LinesId\", invoice.id);",
															"    pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"    createLines(invoice.id);",
															"  ",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(0);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															"",
															"",
															"function createLines(invoiceId) {",
															" ",
															"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
															"",
															"    // Now creating 4 invoice lines",
															"    for (let i = 1; i < 5; i++) {",
															"        if (i % 2 === 0) {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
															"        } else {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine2Id\");",
															"            invoiceLine.subTotal = -invoiceLine.subTotal;",
															"        }",
															"  ",
															"        invoiceLine.releaseEncumbrance = i === 4;",
															"        ",
															"        utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
															"            pm.test(\"Invoice line #\" + i + \" is created in storage\", () => {",
															"              pm.expect(err).to.equal(null);",
															"              pm.expect(response).to.have.property('code', 201);",
															"            });",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "608f1c84-bf63-480c-ae18-478c09a66d49",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
															"",
															"invoice.note += \" - with 4 lines for transition through workflow\";",
															"invoice.status = \"Open\";",
															"invoice.currency=\"EUR\";",
															"",
															"delete invoice.adjustments;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0cec9ddd-01e6-4234-b9ef-1712509abfd2",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fe1289b5-1d7c-464a-907c-92313285b379",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.environment.set(\"workflow-voucherWith4LineId\", voucher.id);",
															"                    let voucherNumberPrefixValue = JSON.parse(pm.variables.get(\"voucherNumber\")).voucherNumberPrefix;",
															"                    pm.expect(voucher.voucherNumber).to.include(voucherNumberPrefixValue);",
															"                    //check acqUnitIds list of invoice and created voucher are equal",
															"                    pm.expect(utils.arraysOfStringsAreEqual(invoice.acqUnitIds, voucher.acqUnitIds)).to.be.true;",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check voucher lines created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "03009860-54a7-43ae-b1b7-12e4513cec4a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ab72a9bd-f317-4303-9b44-e7ee3e5a98ed",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json().voucherLines;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of voucher lines\", function() {",
															"",
															"    pm.expect(voucherLines).to.have.length(1);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"    voucherLines[0].fundDistributions.forEach(distr => pm.expect(distr.distributionType).is.to.equal(\"amount\"));",
															"});",
															"",
															"pm.environment.unset(\"workflow-voucherWith4LineId\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{workflow-voucherWith4LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{workflow-voucherWith4LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a149b379-dc09-433b-ad99-51407bbd3cba",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1d606600-8cd1-4cf2-b03b-2e571bb8220f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"            // Validate order lines",
															"            utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
															"                pm.test(\"Associated order lines payment status updated\", function () {",
															"                    res.json().compositePoLines.forEach(poLine => {",
															"                        let expectedStatus = (poLine.id === globals.poLine1Id) ? \"Fully Paid\" : \"Partially Paid\";",
															"                        pm.expect(poLine.paymentStatus).to.equal(expectedStatus);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fa08c35c-3dfe-4287-a269-0db28dcb2941",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c3d7af5c-a613-4731-be91-fa56d174387b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check number of credits created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "67c11442-8297-4ea8-9b4b-0689cc268888",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "47579937-4ee0-422e-bae9-4018adaa5c3c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of credits\", function() {",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Workflows with empty configs",
							"item": [
								{
									"name": "Delete invoice configs",
									"item": [
										{
											"name": "Get invoice configs and delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "20cb8a47-f791-4a39-8f5e-4b9756f98a58",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let currentConfigs;",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"",
															"    currentConfigs = pm.response.json().configs;",
															"    console.log(\"Current configs: \", currentConfigs);",
															"});",
															"",
															"let configsToProcess = globals.testData.invoicesConfigs.configNames;",
															"for (var i = 0; i < configsToProcess.length; i++) {",
															"    let configName = configsToProcess[i];",
															"     if (currentConfigs.length > 0) {",
															"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
															"        utils.deleteConfig(configId);",
															"    } else {",
															"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "31eafe8d-fe0c-4f51-bcd2-ca1514047f64",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b92bbbac-a469-4a10-a9de-08eeb72787f6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineId\", invoice.id);",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(10);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4d827b36-5adb-4f54-833d-b4ff0acac87b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
															"",
															"invoice.note += \" - with 1 line for transition through workflow\";",
															"invoice.status = \"Open\";",
															"",
															"invoice.adjustments[0].fundDistributions = [{",
															"    \"fundId\": pm.environment.get(\"fund2Id\"),",
															"    \"distributionType\": \"percentage\",",
															"    \"value\": 50",
															"},",
															"{",
															"    \"fundId\": pm.environment.get(\"fundId\"),",
															"    \"distributionType\": \"amount\",",
															"    \"value\": 5",
															"}]",
															"delete invoice.voucherNumber;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order-summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dc6a6bec-c969-4236-a585-b3c671b288d7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Order transaction summaries line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3a33138c-032e-42fd-a918-8ef82e4ab2e0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\": \"{{completeOrderId}}\",\n\t\"numTransactions\": 2\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 1st encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7184ed72-1df8-4b70-89d6-88bb57eccbd7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId1\", transaction.id);",
															"    pm.environment.set(\"encumbrance1\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fe4a697d-96f0-48a6-866b-1cf1e62add74",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1500,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1500,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine1Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fundId}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 2nd encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e9e8e49f-42db-47dd-ad2b-7d9eb05d9c42",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId2\", transaction.id);",
															"    pm.environment.set(\"encumbrance2\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "89b7d678-d5af-4f6b-b27f-731bb02a37c9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1000,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1000,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine2Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fund2Id}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice line without poLineId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7f1a5da5-5907-4409-8bfc-2a7ba899afe7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Invoice line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "41f96a78-0a5b-4717-a7b7-260c6c16e5a0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"",
															"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"));",
															"    invoiceLine.subTotal = 101;",
															"    invoiceLine.fundDistributions[0].value = 50;",
															"    invoiceLine.fundDistributions[0].encumbrance = pm.environment.get(\"encumbranceId1\");",
															"    let amoutDistribution = {\"fundId\": invoiceLine.fundDistributions[0].fundId, \"distributionType\": \"amount\", \"value\": 55.6, \"encumbrance\" : pm.environment.get(\"encumbranceId2\")};",
															"    invoiceLine.fundDistributions.push(amoutDistribution);",
															"    delete invoiceLine.poLineId;",
															"",
															"pm.variables.set(\"emptyConfigWorkflow-invoiceLineContent\", JSON.stringify(invoiceLine));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceLineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoice-lines"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 1 line",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bc788cf7-533a-45f5-b87c-8537e64863a7",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "06630943-218c-4da6-88a8-51c6887f3187",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"            ",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.environment.set(\"emptyConfigWorkflow-voucherWith1LineId\", voucher.id);",
															"                    let voucherNumberPrefixValue = JSON.parse(pm.variables.get(\"voucherNumber\")).voucherNumberPrefix;",
															"                    pm.expect(voucher.voucherNumber).to.not.include(voucherNumberPrefixValue);",
															"                    //check acqUnitIds list of invoice and created voucher are equal",
															"                    pm.expect(utils.arraysOfStringsAreEqual(invoice.acqUnitIds, voucher.acqUnitIds)).to.be.true;",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get voucher lines by query",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "41dbdb71-bd16-48d0-a0cd-be74157de697",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "adbe944d-41f5-40bb-b489-82bae28e5df5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get Voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json();",
															"    pm.expect(voucherLines.voucherLines.length).to.equal(2);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"   voucherLines.voucherLines.forEach(line => line.fundDistributions.forEach(distr => pm.expect(distr.distributionType).is.to.equal(\"amount\")));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check pending payments has been created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8609bc0d-0108-446a-82af-3c42ee11ad58",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b9421a2a-e4c5-4d34-9491-e1714fa99f2d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var transactions = pm.response.json().transactions;",
															"    pm.expect(transactions.length).to.eql(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Pending payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Pending payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check invoice transaction summary created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "544876a4-6bfc-4a99-9f24-02889a706d27",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ebb0497b-f760-47b3-be03-b8dfae97c5cd",
														"exec": [
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var numPendingPayments = pm.response.json().numPendingPayments;",
															"    pm.expect(numPendingPayments).to.eql(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with line w/o poLineId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f2e257d2-0c67-48f8-adb5-bf6209465194",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c625706b-344a-45d9-82dd-81cd74d16e0c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dc6414b0-360a-41d7-936e-1600145a9a2c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "74564887-7ca0-422c-a57c-d1e5d8d3e17a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Restore invoice configs",
									"item": [
										{
											"name": "Check invoice configs and restore",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0117ba48-96fe-4c37-a2f5-dedf51549b5d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let testConfigs = globals.testData.invoicesConfigs;",
															"",
															"let configs = [];",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"    configs = pm.response.json().configs;",
															"});",
															"",
															"let configNamesToProcess = testConfigs.configNames;",
															"console.log(\"Config codes to process: \" + configNamesToProcess);",
															"",
															"for (var i = 0; i < configNamesToProcess.length; i++) {",
															"    let configName = configNamesToProcess[i];",
															"    let value = pm.variables.get(configName);",
															"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "db58753a-4d71-4350-a022-cda052ec1a52",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "This directory contains various tests related to transition of the invoices/vouchers through the workflow",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Get batch-groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3adfb97-17a1-4199-9549-0b71274a9114",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroups = [];",
											"",
											"pm.test(\"Successfully get batch-groups\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    batchGroups = pm.response.json().batchGroups;",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    batchGroups.forEach(batchGroup => utils.validateBatchGroup(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "460556e3-4db5-41d1-bf07-0b0960957b88",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e601f173-bf20-481e-83eb-4d05aaaa0e3e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"originBatchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9faca9f4-b134-4592-8dad-1652cd688642",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.id",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9014a47-4a63-4bae-9dee-8978f8005fbf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Batch-group\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb705efe-d7bf-4e32-ba0f-5de7d3a4d9ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc6feb87-7291-4058-b93c-355e518f05ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-groups/\" + pm.environment.get(\"originBatchGroupId\"), (err, res) => utils.validateBatchGroup(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f757095-fc13-4568-b4a4-e5399c35be6b",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "176acbfd-c34d-4990-ae88-105dcf98e96d",
										"exec": [
											"pm.test(\"Batch-group is deleted\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3aa6f2ef-1b23-4f73-8ed9-942388b21d79",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Create voucher for batch-voucher-export",
							"item": [
								{
									"name": "Create order One-Time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c99157bf-a0d1-4784-9f6a-596c239596b7",
												"exec": [
													"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
													"if (bePoNumberNum === null) {",
													"    pm.environment.set(\"bePoNumberNum\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "89cf1d4a-cac9-4537-9036-4c70f4827842",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrder = pm.response.json();",
													"    pm.environment.set(\"beOrder\", beOrder);",
													"    pm.environment.set(\"beOrderId\", beOrder.id);",
													"    pm.environment.set(\"beOrderNumber\", beOrder.poNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add order lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0e4ba890-37e4-47ac-8c59-63742f215583",
												"exec": [
													"console.log(pm.environment.get(\"beOrderId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "07485004-977f-46c5-90b6-83cec2521838",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrderLine = {};",
													"",
													"pm.test(\"Order line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrderLine = pm.response.json();",
													"    pm.environment.set(\"beOrderLine\", beOrderLine);",
													"    pm.environment.set(\"beOrderLineId\", beOrderLine.id);",
													"});",
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fc0e3fd-2832-487a-80b6-2ceb40efa432",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{beOrderId}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{beOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b21cf8-9165-485d-9afa-a1d208d6b03d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"Order after open\", function () {",
													"    beOrder = pm.response.json();",
													"    console.log(beOrder.id);",
													"    pm.environment.set(\"beOrder\", beOrder);",
													"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
													"    pm.environment.set(\"bePOLEncumbrance\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{beOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "38b5dd47-293b-42a0-88f7-be94d4f387e1",
												"exec": [
													"var beInvoiceNumber = pm.environment.get(\"beInvoiceNumber\");",
													"if (beInvoiceNumber === null) {",
													"    pm.environment.set(\"beInvoiceNumber\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"beInvoiceNumber\", ++beInvoiceNumber);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "35c9d667-7807-48e4-8748-e1dbf62afe0f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beInvoice = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beInvoice = pm.response.json();",
													"    pm.environment.set(\"beInvoiceId\", beInvoice.id);",
													"    console.log(\"Invoice after create id : \" + beInvoice.id)",
													"});",
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chkSubscriptionOverlap\": true,\r\n  \"currency\": \"USD\",\r\n  \"source\": \"User\",\r\n  \"batchGroupId\" : \"{{batchGroupId}}\",\r\n  \"adjustments\": [\r\n    \r\n  ],\r\n  \"invoiceDate\": \"2020-04-19\",\r\n  \"accountingCode\": \"G64758-74837\",\r\n  \"vendorId\": \"{{activeVendorId}}\",\r\n  \"vendorInvoiceNo\": \"{{beInvoiceNumber}}\",\r\n  \"paymentMethod\": \"Cash\",\r\n  \"status\": \"Open\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add invoice lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d8bed13-b5b6-4a0e-b663-77d3e8efc213",
												"exec": [
													"   console.log(\"BE order line id : \" + pm.environment.get(\"beOrderLineId\"));",
													"   console.log(\"bePOLEncumbrance : \" + pm.environment.get(\"bePOLEncumbrance\"));",
													"   console.log(\"fundId : \" + pm.environment.get(\"fundId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f26f92db-9ad8-49f7-84ed-61f27adf6262",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"invoiceId\": \"{{beInvoiceId}}\",\r\n  \"invoiceLineStatus\": \"Open\",\r\n  \"description\": \"Environment and identity politics in colonial Africa Fulani migrations and land conflict by Emmanuel M. Mbah\",\r\n  \"poLineId\": \"{{beOrderLineId}}\",\r\n  \"fundDistributions\": [\r\n    {\r\n      \"encumbrance\": \"{{bePOLEncumbrance}}\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"distributionType\": \"percentage\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"quantity\": 2,\r\n  \"subTotal\": 0.9,\r\n  \"accountNumber\": \"BRXXXXX-01\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get for the invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd9c2169-b5c3-4868-a1fd-e96ad12e7e04",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beInvoice = {};",
													"",
													"pm.test(\"Order after open\", function () {",
													"    pm.response.to.have.status(200);",
													"    beInvoice = pm.response.json();",
													"    console.log(\"Invoice : \" + beInvoice.id);",
													"    pm.environment.set(\"beInvoice\", beInvoice);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{beInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{beInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8d8d0a2f-c4ab-434a-83a2-d18dd67aea54",
												"exec": [
													"    beInvoice = pm.environment.get(\"beInvoice\");",
													"    console.log(\"Udated invoice\" + beInvoice)",
													"    beInvoice.status = \"Approved\";",
													"    pm.environment.set(\"beUpdatedInvoice\", JSON.stringify(beInvoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e5e99de6-59bf-4205-a422-026057b6a32f",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{beUpdatedInvoice}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{beInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{beInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5a8929e-0286-45b5-bc74-bcbe39e316ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExports = [];",
											"",
											"pm.test(\"Successfully get batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.exist;",
											"    batchVoucherExports = pm.response.json().batchVoucherExports;",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"    batchVoucherExports.forEach(batchVoucherExports => utils.validateBatchVoucherExport(batchVoucherExports));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d6a9c1a-452b-4174-ab07-f03be5d6af12",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dd8361d-4549-4b8d-97a6-8dd02695470d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExport = {};",
											"",
											"pm.test(\"Batch-voucher-export is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.environment.set(\"batchVoucherExportId\", batchVoucherExport.id);",
											"});",
											"",
											"setTimeout(function(){}, 3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56c6691b-b671-4de1-8d72-791ba23cd76b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t  \"status\" : \"Pending\",\n      \"message\": \"Batch voucher export message\",\n      \"batchGroupId\": \"{{batchGroupId}}\",\n      \"start\": \"2020-03-16T00:00:00.000+0000\",\n      \"end\": \"2020-08-22T00:00:00.000+0000\",\n      \"metadata\": {\n        \"createdDate\" : \"2020-04-13T00:00:35.222+0000\",\n        \"createdByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\",\n        \"updatedDate\" : \"2020-04-28T00:01:16.111+0000\",\n        \"updatedByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\"\n      }\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "075aa852-5ec2-437c-8df5-2a73846e2174",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully get Batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.expect(batchVoucherExport.status).to.eql(\"Generated\");",
											"    pm.expect(batchVoucherExport.batchVoucherId).not.eql(null);",
											"     pm.environment.set(\"batchVoucherId\", batchVoucherExport.batchVoucherId);",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"     utils.validateBatchVoucherExport(batchVoucherExport);",
											"});",
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3c8ba87-d662-42c7-b2f3-c06e036b824b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch voucher by id JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efe91af8-2b56-4692-a537-b1b5c2c2b729",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29114f9f-7bc2-491c-b13d-9326be66eaff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{batchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{batchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Edit batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0b3b957-8fae-4166-9787-a6f38c29ea78",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), (err, res) => utils.validateBatchVoucherExport(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ea85771-a385-4aa4-b8bf-319110b745d5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), function (err, res) {",
											"    let batchVoucherExport = res.json();",
											"    batchVoucherExport.message = \"Updated message\";",
											"    ",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials",
					"item": [
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19988e23-2433-4cf9-83bf-ed69095297ee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let credentials = {};",
											"",
											"pm.test(\"Credentials is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    credentials = pm.response.json();",
											"});",
											"",
											"pm.test(\"Credentials content is valid\", function() {",
											"    // check required fields",
											"    pm.expect(credentials.exportConfigId).to.exist;",
											"    pm.expect(credentials.username).to.exist;",
											"    ",
											"    pm.environment.set(\"credentialsId\", credentials.id);",
											"    ",
											"    utils.validateCredentials(credentials);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0dfd8be6-500d-49b9-bda7-81bf1c1d8f1d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// create mock export configuration",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVoucherExportConfigs/configs.json\", function (err, res) {",
											"    let exportConfig = res.json().exportConfigs[0];",
											"    exportConfig.batchGroupId = \"2a2cb998-1437-41d1-88ad-01930aaeadd5\";",
											"    delete exportConfig.metadata;",
											"    ",
											"  utils.sendPostRequest(\"/batch-voucher/export-configurations\", exportConfig, function(err,response){",
											"      pm.test(\"Export configuration is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"exportConfigurationId\", response.json().id);",
											"      });",
											"    });",
											"});",
											"",
											"// prepare credentials body",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/credentials/574f0791-beca-4470-8037-050660cfb73a.json\", function (err, res) {",
											"    let credentials = res.json();",
											"    credentials.exportConfigId = pm.environment.get(\"exportConfigurationId\");",
											"    delete credentials.metadata;",
											"    ",
											"    pm.environment.set(\"credentialsBody\", JSON.stringify(credentials));",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21804876-e92c-4993-bc78-ce84c0a358de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let credentials = {};",
											"",
											"pm.test(\"Successfully get credentials\", function () {",
											"    pm.response.to.have.status(200);",
											"    credentials = pm.response.json();",
											"});",
											"",
											"pm.test(\"Credentials content is valid\", function() {",
											"    utils.validateCredentials(credentials);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e2f8e9c-f58e-4b33-b35a-0978086d262e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bae240f-e7d4-4e8c-bbca-b67e97260443",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => utils.validateCredentials(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58a7d66e-12e8-47b1-8488-7611c9a4aec4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => {",
											"    let credentials = res.json();",
											"    credentials.username = \"newName\";",
											"    credentials.password = \"newPassword\";",
											"    delete credentials.metadata;",
											"    pm.environment.set(\"modifiedCredentialsBody\", JSON.stringify(credentials));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedCredentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a2f561af-a658-4243-8c4e-02b12e0067de",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9f8b2929-f7b0-4fe5-ae16-d711f294e6d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create invoices for negative tests",
					"item": [
						{
							"name": "Reviewed",
							"item": [
								{
									"name": "Create reviewed invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5beeef26-4811-4a7e-b830-b961788984bf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceId\", invoice.id);",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));",
													"",
													"    createLine(invoice.id);",
													"",
													"    // Verify that voucher has not been created",
													"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"    });",
													"});",
													"",
													"function createLine(invoiceId) {",
													"",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
													"",
													"    // Now creating invoice line",
													"    utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
													"        pm.test(\"Invoice line is created in storage\", () => {",
													"          pm.expect(err).to.equal(null);",
													"          pm.expect(response).to.have.property('code', 201);",
													"        });",
													"    });",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c9bc40f-fc1e-4464-a635-c8652fa475fc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Reviewed\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Paid",
							"item": [
								{
									"name": "Create paid invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ee5b6aa-f435-41fc-8068-fceca6a657f4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativePaidStatusInvoiceId\", invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "14712ff7-8c20-453d-8381-c06be3f8c1db",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Paid\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativePaidStatusInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativePaidStatusInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Approved 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "036fae1a-4004-46a1-88dc-fd71ef4cc6f5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Required properties are missing\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"",
													"    pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"    pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"    pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b1a05068-cb33-4da6-b501-0f64da208a36",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Approved\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Reviewed 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c05dad6-a028-413b-bdc0-5fcd12ac2ed6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d688f7f7-f230-488d-8240-3e05459d72b1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Reviewed\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Cancelled 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3ddf626-67e7-4a15-ab85-b824aa83e287",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "351ce9a1-b783-48a0-9f2e-ce42e90f5c37",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Cancelled\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Open 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ca77ca8-ed74-4472-8d11-1e6998706bfc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fcb1216a-f4e1-457c-83b7-60bd2a9f84c1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Open\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed8adf6c-a1d6-41bb-9b97-48cddf939fc7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7803bfec-d956-4838-beea-01e84c551206",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Approved",
							"item": [
								{
									"name": "Create to be approved invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40ff1cc6-514f-4d9b-9d15-fd8576923184",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeApprovedToPaidInvoice\", invoice.id);",
													"    pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeApprovedToPaidInvoice\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"negativeApprovedToPaidInvoiceLineId\", response.json().id);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "579d66b6-0ecd-460d-b5ba-9ee882cb88f3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Open\";",
													"",
													"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedToPaidInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aad9433d-7511-4730-9758-1f982269560d",
												"exec": [
													"let invoice = JSON.parse(globals.negativeApprovedToPaidInvoiceContent);",
													"invoice.status = \"Approved\";",
													"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a7a4e1ff-75b2-4c70-a288-5c9817bea13e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
													"        pm.expect(res.json().status).to.equal(\"Approved\");",
													"        pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(res.json()));",
													"      ",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedToPaidInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedToPaidInvoice}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Create approved invoice with locked total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a51ff97c-d981-48b9-b806-30e23c783869",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
													"",
													"invoice.lockTotal = true;",
													"invoice.total = 12.34;",
													"invoice.note += \" - locked total\";",
													"invoice.status = \"Open\";",
													"",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"delete invoice.adjustments;",
													"",
													"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eba472d2-4b5c-4baa-b9aa-c504097ea377",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalId\", invoice.id);",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addLine(invoice);",
													"});",
													"",
													"function addLine(invoice) {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoice.id);",
													"    invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
													"",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.expect(response).to.have.property('code', 201);",
													"          utils.updateInvoiceStatus(invoice, \"Approved\");",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContentLockedTotal}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify invoice with locked total and delete voucher",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "02dd559b-9bd8-4961-8b8e-bed3b46f1da9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "035df84a-522b-48eb-a26a-5e6960af1a80",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is Approved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
													"    pm.expect(invoice).to.have.property('status', \"Approved\");",
													"    utils.deleteVouchersForInvoice(invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedInvoiceWithLockedTotalId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create approved invoice with non-existing fund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6eea1862-9fd2-4451-9baa-c4af66a98a5b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFund\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceWithUnexistingFund\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.fundDistributions[0].fundId = require('uuid').v4();",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72d91bac-ac70-40f4-8ccc-b5d6234e680a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create approved invoice with big invoiceLine.total",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1d9eec1-23e8-4f97-99ff-3be15bac0dcc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceOwerexpended\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceOwerexpended\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.subTotal = 2000000000;",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"negativeOwerexpendedInvoiceLineId\", response.json().id);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "caa3a736-c7c4-4609-96e3-00c19f2ca699",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Test GET batch voucher by id without Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50437480-cf27-472c-bc0a-2b6cef4300e6",
										"exec": [
											"pm.test(\"Error get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9185dfc1-12a8-4f88-a2a7-c64eeb3c14e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Test GET Non-Existing batch voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42def139-3a54-4914-aa33-54a48a4ce55c",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7ebb4dea-dc21-45d2-b7de-2a1875d47f0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/1cc2d3ec-b239-4f5e-b34e-fc63dea23d98",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"1cc2d3ec-b239-4f5e-b34e-fc63dea23d98"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d5e7519-1bfe-4f69-a855-5fad9df43992",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1725c3f5-bffa-4ea0-8c31-dd6faa540422",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Documents",
					"item": [
						{
							"name": "Update document - PUT metod not implemented",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dd48807-819c-4be9-9fc6-cdf6c7c65849",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Method not implemented\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e1652ea-8b25-4db1-ab2c-ea2c449163a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{documentWithURL}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}/documents/{{documentWithUrlId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeReviewedToApprovedInvoiceId}}",
										"documents",
										"{{documentWithUrlId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Update Invoice with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53939025-8e65-4b97-8843-653b26eff942",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.currency = \"TUGRIK\";",
													"    invoice.total = 100.500;",
													"    pm.variables.set(\"updatedApprovedInvoiceBody\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "653cb332-5e8f-4514-b1a5-533edd342abb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let errors = pm.response.json().errors;",
													"    pm.expect(errors).to.have.lengthOf(1);",
													"    pm.expect(errors[0].message).to.include(\"Field can't be modified\");",
													"    pm.expect(errors[0].code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(errors[0].protectedAndModifiedFields).to.include.members([\"currency\", \"total\"]);",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedToPaidInvoice}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get invoice by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2239901-691e-4fe0-9a7d-c6282731604d",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cdbde595-d23c-4f4b-bfb5-7eef62583844",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c05ca21c-eb98-44ee-b953-2b8b72aabdbb",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20ddeccc-1e88-46d5-9519-0042fdf62c5f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a63aaf4-9cc4-4f9f-8fd0-22ff7f4bc947",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01ed7b5b-c210-44f7-862c-29d29e1d59fd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b4021dc-56fb-4b21-85c6-1212b68f5fdb",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2686a30f-62f3-4e09-8e03-49ed4096938f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac9cfcce-8a5d-4997-ac76-7d8b676865d6",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f247a60f-329c-42af-9b97-6e35203a6cca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8664c18-6504-41d8-a430-4b50234f62bd",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a129317e-fd21-42b8-9af6-3c7a2a269e79",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice with locked total but without total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26bccb4a-59a2-4359-9e5a-7ee3c7600240",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"",
											"delete invoice.total;",
											"invoice.lockTotal = true;",
											"",
											"pm.variables.set(\"invoiceBodyWithLockedTotal\", JSON.stringify(invoice));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3a927105-45a2-4957-9bd3-b3941808906e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected creation\", function () {",
											"    pm.response.to.have.status(422);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"invoiceTotalRequired\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceBodyWithLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create empty invoice with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ef54372e-2892-4fd9-9f92-e27d18913966",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "60dc6749-5825-43bf-aebe-b3546a1f76f3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(7);",
											"",
											"        let requiredProps = utils.getInvoiceSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length - 1);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Update invoice by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0249bb9-2f6b-4181-899a-626c6981c8fd",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74dfec9a-3b5a-45c6-9cbc-87c1b7356455",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89c074ac-0a2a-4eca-af0f-c1551cfc5ac2",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d6b3ec7-a15a-47e6-a9fe-a146c74a8e15",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "351c5028-f4f8-4035-81b1-e4cd4592efe5",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "287f8ce1-a4d8-4036-a9ac-ee6528590833",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6d591a6-1289-4fc8-86f2-c3444cb2815b",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d34b9008-904d-4514-b656-c440a347f1d2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with status Piad, and missing poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf9028b2-890b-47ab-9339-bc218b8da0cc",
										"exec": [
											"let invoice = JSON.parse(globals.negativeApprovedToPaidInvoiceContent);",
											"invoice.status = \"Paid\";",
											"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "31cd15a6-6698-45d4-8e14-6657121bcc37",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
											"        pm.expect(res.json().status).to.equal(\"Approved\");",
											"      ",
											"    });",
											"});",
											"",
											"pm.globals.unset(\"negativeApprovedToPaidInvoiceContent\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{negativeApprovedToPaidInvoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedToPaidInvoice}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total changing total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c27288ec-7163-4c2c-b684-08cced230c08",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.total += invoice.total;",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "63bce204-570f-449a-b48c-b0c7f55e83fb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"One 'protectedAndModifiedFields' is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].protectedAndModifiedFields[0], \"The only changed property should be 'total'\").to.equal(\"total\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total to false and delete total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9d0cf82c-5d8a-40db-9e22-acd78903c8a5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.lockTotal = false;",
											"    delete invoice.total;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c47bda3-ea9f-4fe4-9b33-3bb4b9aa1667",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Two elements in 'protectedAndModifiedFields' are expected\").to.have.lengthOf(2);",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Unexpected changed properties\").to.have.members([\"total\", \"lockTotal\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "019e7a70-aa0f-470c-b47c-9bff2c6511e2",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "270e6bd8-aed1-4bf7-8799-b4bdcd4dbcbd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3053cc2-e7e3-4571-a398-dfb86b96d29b",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee33a3ab-5b00-435d-bb44-bca0bef93e7f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f2010ab-2894-4a4b-ab3a-316f29224f17",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5bda6418-1959-4200-8bce-30aaec383470",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f61cd83-0565-4647-b7a0-49b00b700353",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e207d054-0d71-4748-bfad-98801cc26a9d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Update Invoice-Line with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "26ca3760-6038-4715-ac32-ad89dfe84aa1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.environment.get(\"negativeApprovedToPaidInvoiceLineId\"), (err, res) => {",
													"    let invoiceLine  = res.json();",
													"    invoiceLine.quantity = 10;",
													"    invoiceLine.subTotal = 100.500;",
													"    pm.variables.set(\"updatedApprovedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "55c06a5d-c938-4579-bdf1-2ae2757fec41",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let errors = pm.response.json().errors;",
													"    pm.expect(errors).to.have.lengthOf(1);",
													"    pm.expect(errors[0].message).to.include(\"Field can't be modified\");",
													"    pm.expect(errors[0].code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(errors[0].protectedAndModifiedFields).to.include.members([\"quantity\", \"subTotal\"]);",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeApprovedToPaidInvoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeApprovedToPaidInvoiceLineId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create empty invoice-lines with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ddff81d8-2cd1-4767-8bd4-114c9d0c0310",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "09fdc081-e073-4775-9c46-41569ebcc6ff",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"",
											"        requiredObj(errors, \"description\");",
											"        requiredObj(errors, \"invoiceId\");",
											"        requiredObj(errors, \"invoiceLineStatus\");",
											"        requiredObj(errors, \"subTotal\");",
											"        requiredObj(errors, \"quantity\");",
											"",
											"        // releaseEncumbrance is also required but has default value",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Create invoice line - without required fields- 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32880571-d2ea-44dc-baa8-8fc4e4f33d19",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"delete line.invoiceId;",
											"delete line.invoiceLineStatus;",
											"delete line.subTotal;",
											"delete line.quantity;",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d984d1dc-d684-4da3-929a-b8661641fa26",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    ",
											"});",
											"pm.test(\"4 validation errors\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea5ce70f-4022-440c-8acf-cff106a0895a",
										"exec": [
											"pm.test(\"Status code is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b72a5d6-a22d-4566-b2ce-9945bcd7482b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b44abf9-5c74-43bc-b4e8-7e2bbd3c75c3",
										"exec": [
											"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2262b3f-c982-4ae6-9132-63316a35ac8b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"invoiceLine.invalidProperty = \"invalid\";",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice line by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69d1fb93-aa7a-412b-ab54-01c2ef48846e",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4075a869-521d-49d0-8c7f-6db9ce045dbd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invoice Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0c2b178f-b9e0-48d7-83e3-5cf7dbf4bbf4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df4e7982-c5b3-49b3-aeab-40077008a75b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get invoice lines by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51d666c1-1e98-41c2-964f-fae1f8e25ae4",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice-line by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccd6e3b9-af49-4f27-b4bb-ea57bd04608d",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f7d2ee6-14ca-4408-8cf5-ff8505dfc503",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice line with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a13256cb-944b-4a0e-8eea-6f2a1cc0e229",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e5d2377-b6f6-43a3-8b1e-835182770b90",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8bf87b4-c1e7-4c05-a3c9-7ac25d7c1877",
										"exec": [
											"pm.test(\"Invoice line is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce0a055d-cdd6-4068-9181-d9ddc1bd8be5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice-line with invalid adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3caa2b6a-a059-4f66-a90e-a592daba6a1e",
										"exec": [
											"pm.test(\"Invoice Line creation fails\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98eac9d7-a016-4b16-9f19-b38c18ce1116",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let adjustmentsArray = [];",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"delete invoiceLine.adjustments;",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
											"",
											"let adjustment1 = utils.buildAdjustmentObject();",
											"adjustmentsArray.push(adjustment1);",
											"",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Not Included in\";",
											"adjustmentsArray.push(adjustment2);",
											"",
											"invoiceLine.adjustments = adjustmentsArray;",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Create invoice-line for approved invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9981d5e2-1d63-4b30-b115-25d9126ac0fa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let error = {};",
											"",
											"pm.test(\"Can't add invoice line to the invoice that has been approved\", function () {",
											"    pm.response.to.have.status(500);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.equal(\"prohibitedInvoiceLineCreation\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d9dfaa7b-9483-48c5-a70a-6248853324e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"negativeApprovedToPaidInvoice\"));",
											"",
											"pm.variables.set(\"approvedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{approvedInvoiceInvoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "675e7a98-a7c8-4f97-9f71-5b38c027a4a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ff414961-60c3-431c-ad30-d3149fec94c6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e89df717-474b-4d7d-8cfc-31af410d7759",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher protected fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "488fd409-b439-485b-8b75-4c83f673a894",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"    pm.expect(pm.response.json().errors[0].protectedAndModifiedFields).to.have.members([\"systemCurrency\", \"exchangeRate\", \"voucherDate\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c374c8bb-9b17-469f-9ebc-f624b6c61b31",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher bad id format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58d19e2b-f42c-4c63-8330-9b22952ebf5a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e18c1b9f-b1ce-4cea-9b1a-3d3bb5ce3fec",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id-format"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Get voucher line by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc3ce120-169b-4201-8b4e-c6b351e692e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9eb8ca18-f606-428c-b442-63c784c01462",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed7194a9-24c1-4830-bb2c-a32d04527e36",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildVoucherLineWithMinContent();",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d4a97e7-8309-48dc-ac43-99a86bec4f20",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher line by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58e610ae-e6c7-46e7-9389-cdad19c9ef70",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(setting) with negative start value - illegal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9fce9c8d-21db-452d-98d2-6e5986d4e249",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0a6b822-81ca-49fa-910d-d1be9dd6db39",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Re(setting) with negative voucher start value not allowed\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/-150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"-150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get start value with wrong lang param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e2805db-1f64-4f38-acb2-974a316801f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "67ac8ad9-0ac3-4922-ac08-7f75e5f86f28",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1649e11f-5445-4b77-ae21-8d89950471de",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58eef267-ecf6-46e7-8c66-ab3b1bb8069d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Transition to Approved",
							"item": [
								{
									"name": "Prepare invalid vousherNumberPrefix config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cfec950-0bc9-4275-9fbd-bceaa9f30a2f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function() {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"voucherNumber\";",
													"let value = \"{\\\"voucherNumberPrefix\\\": \\\"invalidPrefix86\\\"}\";",
													"",
													"utils.updateOrCreateInvoicesConfig(configs, configName, value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d65b525-383a-40f1-af22-a5664d8a5a49",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE and configName==voucherNumber",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==INVOICE and configName==voucherNumber"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53b991d0-b7bf-45fc-b5af-53fe9405abb9",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeReviewedToApprovedInvoiceContent\"));",
													"invoice.status = \"Approved\";",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7ede408e-43c1-46b4-83c5-65b9b47b6e97",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(\"Internal Server Error\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeReviewedToApprovedInvoiceId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function () {",
													"            pm.expect(invoice.status).to.equal(\"Reviewed\");",
													"        });",
													"        pm.test(\"Voucher number not exist\", function () {",
													"             pm.expect(invoice.voucherNumber).to.not.exist;",
													"        });",
													"        ",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"reviewedToApprovedInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeReviewedToApprovedInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Paid",
							"item": [
								{
									"name": "Pay invoice with locked total (no voucher)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "36928995-4456-41be-bba5-2e58c429daa2",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b7d80ea-570e-48a4-a53a-0443929f1653",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: voucher is not available\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"voucherNotFound\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
													"        pm.test(\"Invoice status updated\", function () {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.status).to.equal(\"Approved\");",
													"",
													"            // Validate voucher",
													"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"                pm.test(\"Still no voucher\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"            });",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedInvoiceWithLockedTotalContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedInvoiceWithLockedTotalId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay invoice with non-existing fund",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5a0fc642-34c4-4d26-9b66-7b0d86351161",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceWithUnexistingFundContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6b6f22c-e72c-48e5-b7b3-7a626b4e97b5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"fundsNotFound\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"funds\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFund\");",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFundContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceWithUnexistingFund}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceWithUnexistingFund}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay invoice with owerexpended line.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8ca3ff7-1c1a-44fc-a571-65529a13e7b5",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceOwerexpendedContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ea3a93ce-30d8-4986-81f1-4c95de2f1990",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"transactionCreationFailure\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\", pm.environment.get(\"negativeOwerexpendedInvoiceLineId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"invoiceLineId\");",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"value\", pm.environment.get(\"fundId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"key\", \"fundId\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeOwerexpendedInvoiceLineId\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpended\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpendedContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceOwerexpended}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceOwerexpended}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Approved with Empty FundDistributions",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "397e107f-b562-4bab-98be-63d4672a5686",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosId\", invoice.id);",
													"    // pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));",
													"",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"",
													"    utils.validateInvoice(invoice);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "735bc883-cd0f-48ca-8609-21d6bc22c786",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8b4fdcbb-b7f8-472a-864e-27734dd27b1d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=50;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "daebb5f1-6ba8-4cf6-9d32-3551f5aaf9be",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b3ea4f9f-fd6c-4714-81b9-159283b16f2e",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e20f521b-3bbc-4792-a4be-1ff6eeb476a3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros amount !=invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ccc90898-4891-4c74-85a9-b92c472ed849",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c87e264-6435-4068-be7a-1e9a77020bb3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros amount != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ed673d8f-c009-4f31-9625-4e97ddc36020",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9f3394e6-5dcf-431d-a19e-f5102c8b277f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros mixed distr type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "657089b6-81f6-41af-a13e-1897d4ae0c21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"invoiceLine.fundDistributions[0].value = 50;",
													"let percentageDistr = {\"fundId\":  invoiceLine.fundDistributions[0].fundId, \"distributionType\": \"percentage\", \"value\": 50};",
													"invoiceLine.fundDistributions.push(percentageDistr);",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c97d87a0-23ea-4ceb-9a1b-0880990d99cb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros mixed type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6cb705a1-4408-4851-9b6e-7216677c255a",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d312b2f-21f8-42a7-977a-4e7e70a1ba18",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line without FundDistributions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dc83cfb7-e88c-48ce-b1b4-c177936c925a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"delete invoiceLine.fundDistributions;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0537f41f-bfb5-4b38-bbe8-db2e60ccfff5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit ot approved invoice without FundDistros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16a5e2bd-d7fc-49f7-b416-45c5ac4f5e3c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "768b688c-a320-4e17-85d6-99550bf4a731",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"InvoiceWithEmptyFundDistrosContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage = 100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b333f585-a29e-4ede-8851-37ead22fca7e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=100;",
													"pm.environment.set(\"lineWithFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "171a8a57-b668-43ea-b251-d821a9a18413",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "87c04dbc-52c5-4f2e-b593-a7b52b7875ea",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Percentage\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3459fb70-c500-484a-94b1-6c655e3245ab",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros amount != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b776284f-a007-48d5-b1de-932d26793f41",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8b050486-8888-4acf-bbf7-6a8b04d81bee",
												"exec": [
													"",
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros mixed != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c51ec2ae-2e1d-49e5-93c6-8cfd7407cc8e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    });",
													"    adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    });",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d1a2fc6-66f5-4490-a135-ca349c68b90c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment without fundDistr",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ad35766b-1401-4f50-836c-cc494dc399fa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0098069f-dc10-454a-b444-46835e1e1c7c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f948944b-a64c-4bb6-a674-1a5ab4511bf3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c566f4f-9622-470f-af10-9c7c39484636",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice with incompatible fields",
							"item": [
								{
									"name": "Create Open invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3af14cdd-a140-4d7c-af67-484d68300cb4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(pm.response.json()));",
													"    pm.environment.set(\"incompatibleFieldsInvoiceId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d700f542-9b81-4fb9-8aeb-cab5311452b6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8ce6d22-afd2-4a12-b1dc-1b5ac3372ed5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not updated\", function() {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.environment.unset(\"incompatibleFieldsInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "624e4ec3-167d-4962-8b8f-7a60677585c5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let incompatibleFieldsInvoice = JSON.parse(pm.environment.get(\"incompatibleFieldsInvoiceContent\"));",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{incompatibleFieldsInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{incompatibleFieldsInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dc17e54-6d44-4887-894d-72ced78d2df3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "faf5817a-6e89-4fba-b6e1-3128c8716589",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Create batch-group missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e68c5757-a0b3-42a4-ac32-12aff49df761",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "430a14bc-4397-453c-8f1e-afc8f410fae5",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    delete batchGroup.name;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-groupby id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "344faa15-6d8d-4f22-aacd-716c3a0dcc4c",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d502fa50-00cc-4cbc-b202-18479eb06834",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7b7b452-b8dc-4f43-acc9-b1196d16fd26",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aed2c948-e65b-4227-b44d-1b9d2b1f82e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dcd2b35-1fb6-488f-b53a-a3619d7952f1",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "640320fc-cf07-42ee-989f-86d425941287",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cce5737-af8e-438b-85d0-732d24340c56",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28c09bb8-270f-457f-8ee2-5564360bb3d6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b0fb040-70e4-4713-9d4b-33c4ea69b975",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18ddd093-1f00-4b21-99a9-9dd32621f8ec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2118a8d1-0375-48f5-a95c-581f5bcc3cf7",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4647032f-beee-48fa-bd2d-474ae1043469",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a5a941c-1f23-4020-add1-06623cd3f381",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90bcc885-7fc5-4210-8bcf-afae14983ef3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e85788e-b6bd-40a9-8791-d06a49cb5e94",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eec665e0-f8b1-4487-af3f-82c2e38b6d0a",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a22061a-9269-46fd-9bdb-6d72063ef18d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b9cbc92-d783-4cdc-aac8-b0f45881b0e6",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.name;",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d64d78c-e88b-4548-bf5a-cff6aa6021a7",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f278fec0-5eec-4c80-abda-5e13864521c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a60928ac-cced-41f4-8104-25a6d965e4ac",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "911f346c-9b14-46fe-9074-9dd4ba087224",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28a829b4-ebac-4cb1-b405-6fea1897105a",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f99d3575-7a2e-4b42-a66a-034265645638",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6244ac9d-6175-4948-bdae-52eed12c9bc4",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34e84876-5f1f-478d-9dd3-75544d8697c8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with UUID in use",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80cc013e-6b97-492e-976b-03e0a7dccf3b",
										"exec": [
											"pm.test(\"Batch-group is in use\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f317a19-9c59-4d93-a17a-697dc70440ee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupSystemRecordId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupSystemRecordId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Create batch-voucher-export missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c995e7ff-20b3-4663-bfe0-4b216c1f9e03",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f1fd278-fc43-4618-bcc7-2dc8040230d4",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVoucherExports/batch_voucher_exports_collection.json\", function (err, res) {",
											"    let batchVoucherExport = res.json().batchVoucherExports[0];",
											"    delete batchVoucherExport.batchGroupId;",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc2eb526-a4a9-4df0-b8bb-6132d8070365",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4ae30ca-3e50-456f-ad27-a6275a4e2c63",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "314ebf34-a0b1-4446-9d1d-62ccd3ccbc6c",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d0e1827-cdf3-442a-9d1b-f4a81fad57df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42b8899c-fbf7-45ea-8da8-ebcd91728786",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7821614f-4ace-4032-b362-a1d54cbd149d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8924cb5-7bc8-472e-848a-57e3a591b394",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29971741-66d4-47a6-a5b6-d743c8c62033",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6162c20a-ece3-4df0-abce-1ded36948345",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7ea39f6-275b-41de-ab0f-f9143b99178f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "331586d3-f9ee-4131-8e9a-5529c825121f",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1094bbba-37fd-4607-a405-9ec7e85bfa0d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-voucher-export by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d81d343-ca52-446a-a0d9-9c6c09b53c34",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c445fe3-14fb-4dce-b2e6-141d138bfe76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7929ac9c-0b8a-4b83-8285-460bb9eeaa3c",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88d3d134-40b9-45a4-becc-5fadfca2bf45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4797609c-62d5-4e8e-9c74-3f7ccd8699fc",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49e08979-8a3d-4500-8b01-0a038fcd33b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf8ea71e-0b21-4273-b1cb-78665c621590",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "03e5ea59-0380-4d35-a305-bb26cad942ee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d2f2c2e-b00e-48fd-8da1-725cefd85819",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7df30cc3-85b8-4c19-aedb-e4d3952812ce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher export configs",
					"item": [
						{
							"name": "Get export config by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0a16290b-8756-478e-a4b1-ea9cd53ebe1b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0cbf682f-1cc2-4bd2-9855-e6d4edb6420a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8771c7d1-0de4-443c-ae80-79eb1b73f3c0",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create export config w/ missing required fields - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14fc92b0-c153-4a59-a00f-872947c3b8e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95fb7743-ff9d-415a-b4e4-6a361f87e70c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(1);",
											"",
											"        let requiredProps = utils.getExportConfigSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d5b1d69-6394-4d67-9880-3bf18e44a55b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "764c8afc-12bb-4af3-820f-91f50e1f6b8d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/075f9308-40a1-41ba-9238-b8a27adc8d39",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"075f9308-40a1-41ba-9238-b8a27adc8d39"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf82ea0f-92a9-4ba7-984a-92f71d77921d",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6273e3b5-8c78-416c-9e64-fcdcba0dd898",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86265392-cfe1-4b97-af71-87ba2719d3e8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755b4ead-6909-4354-9403-290b7bc84b01",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials",
					"item": [
						{
							"name": "Create credentials missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "473bd0d0-08cd-4a43-8d39-06aae055947d",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ff5ff69-0ff5-4d0e-b753-53edf0aa6ef8",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/credentials/574f0791-beca-4470-8037-050660cfb73a.json\", function (err, res) {",
											"    let credentials = res.json();",
											"    delete credentials.exportConfigId;",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    ",
											"    pm.environment.set(\"credentialsBody\", JSON.stringify(credentials));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd3d8d02-b322-422e-bf23-f91c0aaaee1c",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fa123b2-77a3-4060-a02b-ad7ce7d8f232",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{UUIDDoesNotExists}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{UUIDDoesNotExists}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4381b325-f0e8-46e4-bf7f-154dc8bb73a8",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62dbe094-3aed-424d-8f12-c3505631101f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/foo/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"foo",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8adb4107-e220-46ee-8900-07ba55e3b7f4",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39e786ac-36c2-4de9-aa85-1ec003760f5d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1521d14e-a8ca-4a5c-b2e9-8a44e4309b58",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4205d8bb-5644-4c0e-9c85-e24fbbd0309c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => {",
											"    let credentials = res.json();",
											"    credentials.password = \"newPassword\";",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    pm.environment.set(\"modifiedCredentialsBody\", JSON.stringify(credentials));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedCredentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "afc3f979-a0b9-49c7-991b-2097ccb15eac",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37260105-33bd-41a7-92c8-2a4426f62f43",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77a65bff-1146-4571-b182-de5eaa0c2fcb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c74a1a0f-8c09-4406-8875-1697a2cf8cc1",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f8d90348-50d7-44ed-9927-029162f29136",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    invoicesConfigs: {",
					"        configNames: [\"voucherNumber\"],",
					"        bodyTemplate: {",
					"            \"module\": \"INVOICE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    ordersConfigs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Invoices API - Admin\",",
					"                    \"lastName\": \"Invoices Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-invoices-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-invoices-user\",",
					"                \"password\": \"mod-invoices-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"invoice.all\",",
					"                    \"orders.all\",",
					"                    \"acquisitions-units.memberships.all\",",
					"                    \"acquisitions-units.units.all\",",
					"                    \"organizations-storage.organizations.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test invoices tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.INVOICE_NOTE = \"Invoice for API Tests\";",
					"    utils.schemaPrefix = \"invoices_schema_\";",
					"",
					"    utils.prepareInvoice = function(invoice) {",
					"        delete invoice.id;",
					"        delete invoice.approvedBy;",
					"        delete invoice.approvalDate;",
					"        delete invoice.folioInvoiceNo;",
					"        delete invoice.subTotal;",
					"",
					"        invoice.note = utils.INVOICE_NOTE;",
					"",
					"        return invoice;",
					"    };",
					"",
					"    utils.prepareInvoiceLine = function(invoiceLine, invoiceId) {",
					"        invoiceLine.invoiceId = invoiceId;",
					"",
					"        delete invoiceLine.id;",
					"        delete invoiceLine.metadata;",
					"",
					"        invoiceLine.fundDistributions.forEach(distro => {",
					"            distro.fundId = pm.environment.get(\"fundId\");",
					"            delete distro.encumbrance;",
					"        });",
					"",
					"        return invoiceLine;",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getMockInvoiceLine = function() {",
					"        return JSON.parse(pm.globals.get(\"mock-invoiceLine\"));",
					"    };",
					"",
					"    utils.getMockInvoice = function(i) {",
					"        let invoices = JSON.parse(pm.globals.get(\"mock-invoices\"));",
					"        return invoices.invoices[i];",
					"    };",
					"",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => utils.sendDeleteRequest(path, (err, res) => resolve(res.code)));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        delete poLine.alerts;",
					"        delete poLine.reportingCodes;",
					"        delete poLine.fundDistribution;",
					"        delete poLine.details;",
					"    ",
					"        return poLine;",
					"    };",
					"",
					"",
					"    /**",
					"     * Adds Invoice line id to `completeInvoicelineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberInvoiceLineId = function(invoiceLine) {",
					"        if (invoiceLine && invoiceLine.id) {",
					"            let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"            completeInvoicelineIds.push(invoiceLine.id);",
					"            pm.environment.set(\"completeInvoicelineIds\", JSON.stringify(completeInvoicelineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completeInvoicelineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastInvoiceLineId = function(withRemoval) {",
					"        let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"        if (completeInvoicelineIds.length > 0) {",
					"            let lineId = completeInvoicelineIds.pop();",
					"            if (withRemoval) {",
					"                pm.environment.set(\"completePolineIds\", JSON.stringify(completeInvoicelineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the Invoice line is empty except line and order ids",
					"     */",
					"    utils.validateInvoiceLineWithMinimalContent = function(invoiceLine) {",
					"        let expectedLine = utils.buildInvoiceLineWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoiceLine.id, \"Invoice line: id expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description does not match to expected\").to.eql(expectedLine.description);",
					"        pm.expect(invoiceLine.invoiceId, \"Invoice line: invoiceId expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineNumber, \"Invoice line: invoiceLineNumber expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus does not match to expected\").to.eql(expectedLine.invoiceLineStatus);",
					"        pm.expect(invoiceLine.metadata, \"Invoice line: metadata expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal  does not match to expected\").to.eql(expectedLine.subTotal);",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity is expected\").to.exist;",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity does not match to expected\").to.eql(expectedLine.quantity);",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance expected\").to.exist;",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance does not match to expected\").to.eql(expectedLine.releaseEncumbrance);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoiceLine.adjustments, \"Invoice line: adjustments as empty array expected\").to.be.an('array').that.is.empty;",
					"        pm.expect(invoiceLine.adjustmentsTotal, \"Invoice line: adjustments total not expected\").to.exist;",
					"        pm.expect(invoiceLine.comment, \"Invoice line: comment is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.poLineId, \"Invoice line: PO line Id is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productId, \"Invoice line: productId not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productIdType, \"Invoice line: productIdType not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionInfo, \"Invoice line: subscriptionInfo not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionStart, \"Invoice line: subscriptionStart not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionEnd, \"Invoice line: subscriptionEnd not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.total, \"Invoice line: total expected\").to.exist;",
					"        pm.expect(invoiceLine.vendorRefNo, \"Invoice line: vendorRefNo not expected\").to.not.exist;",
					"    };",
					"",
					"",
					"    /**",
					"     * Build Invoice line with minimal required fields.",
					"     */",
					"    utils.buildInvoiceLineWithMinContent = function(invoiceId) {",
					"        return {",
					"            \"description\": \"Some description\",",
					"            \"invoiceId\": invoiceId,",
					"            \"invoiceLineStatus\": \"Open\",",
					"            \"subTotal\": 2.20,",
					"            \"quantity\": 3,",
					"            \"releaseEncumbrance\": false",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Voucher line with minimal required fields.",
					"     */",
					"    utils.buildVoucherLineWithMinContent = function() {",
					"        return {",
					"            \"amount\": 33.55,",
					"            \"externalAccountNumber\": \"54321099\",",
					"            \"fundDistributions\": [",
					"                {",
					"                    \"fundId\": pm.environment.get(\"fundId\"),",
					"                    \"distributionType\": \"percentage\",",
					"                    \"value\": 50",
					"                }",
					"            ],",
					"            \"sourceIds\": [\"0726fc17-38c3-4249-81d3-97ffddada92b\"],",
					"            \"voucherId\": \"d384a4c2-9f85-4072-a305-800b3f6f5143\"",
					"        };",
					"    };",
					"",
					"    utils.buildAdjustmentObject = function(amount, type, prorate){",
					"        return {",
					"            \"description\": \"Adjustment for API test\",",
					"            \"type\": type || \"Amount\",",
					"            \"value\": amount || 10,",
					"            \"prorate\": prorate || \"Not prorated\",",
					"            \"relationToTotal\":\"In addition to\"",
					"        };",
					"    };",
					"",
					"    /* === BEGIN - Functions specific to prorated adjustments tests === */",
					"    /**",
					"     * Validates the invoice's prorated adjustments",
					"     */",
					"    utils.validateInvoiceProratedAdjustments = function(invoice, expectedQuantity) {",
					"        let proAdjustments = invoice.adjustments.filter(adjustment => adjustment.prorate !== \"Not prorated\");",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.id, \"Adjustment must have `id` which is going to be referenced by invoice line's adjustment\").to.exist;",
					"            pm.expect(adjustment.adjustmentId, \"`adjustmentId` is not expected\").to.not.exist;",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice line's prorated adjustments",
					"     */",
					"    utils.validateInvoiceLineProratedAdjustments = function(invoiceLine, expectedQuantity) {",
					"        let invoiceAdjustmentIds = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\")).adjustments.map(adj => adj.id);",
					"        let proAdjustments = invoiceLine.adjustments.filter(adjustment => adjustment.prorate !== \"Not prorated\");",
					"",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.adjustmentId, \"Adjustment must have id to invoice's adjustment\").to.be.oneOf(invoiceAdjustmentIds);",
					"            pm.expect(adjustment.id, \"Adjustment id is not expected - only invoice's prorated adjustment can have it\").to.not.exist;",
					"        });",
					"    };",
					"    /* === END - Functions specific to prorated adjustments tests === */",
					"",
					"    utils.updateInvoiceStatus = function(invoice, status) {",
					"        invoice.status = status;",
					"        utils.sendPutRequest(\"/invoice/invoices/\" + invoice.id, invoice, (err,response) => {",
					"            pm.test(\"Invoice is now \" + status, () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(response).to.have.property('code', 204);",
					"            });",
					"        });",
					"    };",
					"",
					"",
					"    utils.deleteVouchersForInvoice = function(invoiceId) {",
					"        utils.getVouchersForInvoice(invoiceId, (err, res) => {",
					"            utils.deleteVouchers(res.json().vouchers);",
					"        });",
					"    };",
					"",
					"    utils.deleteVouchers = function(vouchers) {",
					"        if (vouchers.length !== 0) {",
					"            const timerId = setTimeout(() => {}, 60000);",
					"",
					"            let promises = vouchers.map(voucher => utils.deleteVoucherLines(voucher.id).then(ok => utils.deleteVoucher(voucher.id)));",
					"",
					"            Promise.all(promises)",
					"                .then(result => clearTimeout(timerId))",
					"                .catch(err => {",
					"                    console.log(\"Error happened on voucher record(s) deletion:\", err);",
					"                    clearTimeout(timerId);",
					"                });",
					"        }",
					"    };",
					"",
					"    utils.deleteVoucher = function(voucherId) {",
					"        return utils.processDeleteRequest(\"/voucher-storage/vouchers/\" + voucherId);",
					"    };",
					"",
					"    utils.deleteVoucherLines = function(voucherId) {",
					"        return new Promise((resolve) => {",
					"            utils.getVoucherLines(voucherId, (err, res) => {",
					"                let promises = [];",
					"                res.json().voucherLines.forEach(line => {",
					"                    promises.push(utils.processDeleteRequest(\"/voucher-storage/voucher-lines/\" + line.id));",
					"                });",
					"                Promise.all(promises)",
					"                    .then(ok => resolve())",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on voucher line record(s) deletion:\", err);",
					"                        resolve();",
					"                    });",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.getVouchersForInvoice = function(invoiceId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/vouchers?query=invoiceId==\" + invoiceId, handler);",
					"    };",
					"",
					"    utils.getVoucherLines = function(voucherId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/voucher-lines?query=voucherId==\" + voucherId, handler);",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function(configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateInvoicesConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.invoicesConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.ordersConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function(err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.environment.unset(\"completeInvoicelineIds\");",
					"        pm.environment.unset(\"current-invoices-configs\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"documentWithURL\");",
					"        pm.environment.unset(\"documentWithUrlId\");",
					"        pm.environment.unset(\"documentWithBase64Content\");",
					"        pm.environment.unset(\"documentWithBase64Id\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineContent\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"folioInvoiceNo\");",
					"        pm.environment.unset(\"filterInvoiceId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"incompatibleFieldsInvoiceId\");",
					"        pm.environment.unset(\"InvoiceIdForDelete\");",
					"        pm.environment.unset(\"InvoiceLineIdForDelete\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosContent\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosId\");",
					"        pm.environment.unset(\"invoiceId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"lineWithoutFundDistros\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"minInvoiceId\");",
					"        pm.environment.unset(\"mod-invoices-configs\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"negativeAdjInLineId\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalContent\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoiceLineId\");",
					"        pm.environment.unset(\"negativeInvoiceLineContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoice\");",
					"        pm.environment.unset(\"UUIDDoesNotExists\");",
					"        pm.environment.unset(\"voucherId\");",
					"        pm.environment.unset(\"voucherLineId\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesContent\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"encumbrance1\");",
					"        pm.environment.unset(\"encumbrance2\");",
					"        pm.environment.unset(\"encumbranceId1\");",
					"        pm.environment.unset(\"encumbranceId2\");",
					"        ",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"mock-invoices\");",
					"        pm.globals.unset(\"mock-invoiceLine\");",
					"        pm.globals.unset(\"poLine1Id\");",
					"        pm.globals.unset(\"poLine2Id\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        console.log(\"Starting validating against schemas\");",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice against schema",
					"     */",
					"    utils.validateInvoice = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceSchema());",
					"    };",
					"",
					"    utils.getInvoiceSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice line against schema",
					"     */",
					"    utils.validateInvoiceLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceLineSchema());",
					"    };",
					"",
					"    utils.getInvoiceLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher against schema",
					"     */",
					"    utils.validateVoucher = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherSchema());",
					"    };",
					"",
					"    utils.getVoucherSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher line against schema",
					"     */",
					"    utils.validateVoucherLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherLineSchema());",
					"    };",
					"",
					"    utils.getVoucherLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates batch voucher export config against schema",
					"     */",
					"    utils.validateExportConfig = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigSchema());",
					"    }",
					"",
					"    utils.getExportConfigSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch voucher export config collection against schema",
					"     */",
					"    utils.validateExportConfigCollection = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigCollectionSchema());",
					"    }",
					"",
					"    utils.getExportConfigCollectionSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration_collection.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice is empty except required fields, invoice id and folioInvoiceNo",
					"     */",
					"    utils.validateInvoiceWithMinimalContent = function(invoice) {",
					"        let expectedInvoice = utils.buildInvoiceWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoice.id, \"Invoice id expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total not expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total should be zero\").to.eql(0);",
					"        pm.expect(invoice.currency, \"Invoice currency expected\").to.exist;",
					"        pm.expect(invoice.currency, \"Invoice currency does not match to expected\").to.eql(expectedInvoice.currency);",
					"        pm.expect(invoice.invoiceDate, \"Invoice date expected\").to.exist;",
					"        pm.expect(invoice.invoiceDate, \"Invoice date does not match to expected\").to.eql(expectedInvoice.invoiceDate);",
					"        pm.expect(invoice.lockTotal, \"Invoice lock total does not match to expected\").to.eql(false);",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method expected\").to.exist;",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method does not match to expected\").to.eql(expectedInvoice.paymentMethod);",
					"        pm.expect(invoice.status, \"Invoice status expected\").to.exist;",
					"        pm.expect(invoice.status, \"Invoice status does not match to expected\").to.eql(expectedInvoice.status);",
					"        pm.expect(invoice.folioInvoiceNo, \"Folio Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.metadata, \"Invoice metadata expected\").to.exist;",
					"        pm.expect(invoice.note, \"Invoice note\").to.equal(utils.INVOICE_NOTE);",
					"        pm.expect(invoice.source, \"Invoice source does not match to expected\").to.eql(expectedInvoice.source);",
					"        pm.expect(invoice.subTotal, \"Invoice subTotal not expected\").to.exist;",
					"        pm.expect(invoice.subTotal, \"Invoice subtotal should be zero\").to.eql(0);",
					"        pm.expect(invoice.total, \"Invoice total not expected\").to.exist;",
					"        pm.expect(invoice.total, \"Invoice total should be zero\").to.eql(0);",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice number does not match to expected\").to.eql(expectedInvoice.vendorInvoiceNo);",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id does not match to expected\").to.eql(expectedInvoice.vendorId);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoice.adjustments, \"Invoice adjustments expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.acquisitionsUnit, \"Invoice acquisitions unit not expected\").to.not.exist;",
					"        pm.expect(invoice.approvedBy, \"Invoice approved by not expected\").to.not.exist;",
					"        pm.expect(invoice.approvalDate, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.chkSubscriptionOverlap, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementNumber, \"Invoice disbursement number not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementDate, \"Invoice disbursement date not expected\").to.not.exist;",
					"        pm.expect(invoice.manualPayment, \"Invoice manual payment not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentDue, \"Invoice payment due not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentId, \"Invoice payment id not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentTerms, \"Invoice payment terms not expected\").to.not.exist;",
					"        pm.expect(invoice.poNumbers, \"Invoice PO numbers expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.voucherNumber, \"Invoice voucher number not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Build invoice with minimal required fields.",
					"     */",
					"    utils.buildInvoiceWithMinContent = function(vendorInvoiceNo) {",
					"        return {",
					"            \"currency\": \"USD\",",
					"            \"invoiceDate\": \"2018-07-20T00:00:00.000+0000\",",
					"            \"paymentMethod\": \"EFT\",",
					"            \"status\": \"Open\",",
					"            \"source\": \"API\",",
					"            \"vendorInvoiceNo\": vendorInvoiceNo || \"YK75851\",",
					"            \"vendorId\": \"168f8a63-d612-406e-813f-c7527f241ac3\",",
					"            \"note\": utils.INVOICE_NOTE",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, body, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"",
					"    /**",
					"     * Check if two arrays are equal",
					"     */",
					"    utils.arraysOfStringsAreEqual = function(array1, array2) {",
					"        return JSON.stringify(array1)==JSON.stringify(array2);",
					"    };",
					"    ",
					"    /**",
					"     * Build batch-group.",
					"     */",
					"    utils.buildBatchGroup = function() {",
					"        return {",
					"            \"id\": \"5082b4c2-1504-421e-9da0-0ee8c9e8b07d\",",
					"            \"name\": \"Marx Library\",",
					"            \"description\": \"University of South Alabama\"",
					"            ",
					"        };",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-voucher-export against schema",
					"     */",
					"    utils.validateBatchVoucherExport = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchVoucherExportSchema());",
					"    };",
					"",
					"    utils.getBatchVoucherExportSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_voucher_export.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-group against schema",
					"     */",
					"    utils.validateBatchGroup = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchGroupSchema());",
					"    };",
					"",
					"    utils.getBatchGroupSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_group.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates export configuration credentials against schema",
					"     */",
					"    utils.validateCredentials = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getCredentials());",
					"    };",
					"",
					"    utils.getCredentials = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"credentials.json\"));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"    ",
					"        /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function(poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"    ",
					"        /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function(productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"    ",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d7d3b577-3f40-40c0-b15d-eb7b5a3018ff",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "05010f61-c4b8-4b15-8d3e-8eab3cbbb74c",
			"key": "testTenant",
			"value": "invoice_api_tests",
			"type": "string"
		},
		{
			"id": "2dd0ae03-0c4f-4267-8dee-40741432bb8a",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-invoice/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "e5101718-f056-4b5a-8714-6e16a7071071",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "85ec482a-77b1-410d-ab06-2a5874861ca3",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
			"id": "32e2d3c2-62cb-472c-ad18-cfdf061e8a15",
			"key": "inventory-instanceTypeCode",
			"value": "invoicingApiTestsIdentifierType",
			"type": "string"
		},
		{
			"id": "e10cbc54-3c06-48a8-b366-feced8fbbfa6",
			"key": "finance-ledgerCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "ac19ba60-8d34-43a9-8727-c50b870546ee",
			"key": "finance-fundCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "90a3a74f-a960-4ff7-bf39-391c614a3e86",
			"key": "voucherNumber",
			"value": "{\"voucherNumberPrefix\": \"testPrefix\"}",
			"type": "string"
		},
		{
			"id": "e04aeb67-0b1b-431a-a13f-307c967cde94",
			"key": "batchGroupSystemRecordId",
			"value": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}