{
	"info": {
		"_postman_id": "dbb0866e-a957-4a42-8224-a71ffa060fad",
		"name": "okapi-proxy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authenticate",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "authn/login-supertenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f5a1b48-5a75-4fa2-ba0c-f539cc8cf7fc",
								"type": "text/javascript",
								"exec": [
									"if(pm.response.headers.has(\"x-okapi-token\")) {",
									"",
									"    pm.environment.set(\"supertenantokapitoken\", pm.response.headers.get(\"x-okapi-token\"));",
									"   ",
									" }",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "supertenant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"admin\",\"password\":\"$ecrecy8egetsTyranny\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "modules",
			"item": [
				{
					"name": "_/proxy/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355c5165-4951-4009-b2a7-5e236fef22e0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    tv4.addSchema(\"ModuleDescriptor.json\", JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")));",
									"   ",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data1[0]).to.have.all.keys(\"id\", \"name\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules?order=desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50559b61-cd0a-48a5-8e51-b195d5389751",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    tv4.addSchema(\"ModuleDescriptor.json\", JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")));",
									"   ",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules.. : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?order=desc",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							],
							"query": [
								{
									"key": "order",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules?orderBy=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50559b61-cd0a-48a5-8e51-b195d5389751",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    tv4.addSchema(\"ModuleDescriptor.json\", JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")));",
									"   ",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules.. : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?orderBy=id",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules?full=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "415d0842-6330-453b-a9e4-16b914b55c64",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    tv4.addSchema(\"ModuleDescriptor.json\", JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")));",
									"  // pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.be.true;",
									"    //pm.expect(tv4.missing).to.be.empty;",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"pm.test('Results have expected key attributes', function() {",
									"  console.log(data1[0]);",
									"  pm.expect(data1[0]).to.include.all.keys(\"id\", \"name\", \"provides\");",
									"});",
									"",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules.. : 200\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?full=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							],
							"query": [
								{
									"key": "full",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules?filter=okapi",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e95fce1-7e27-477d-933d-169b8f28807e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    tv4.addSchema(\"ModuleDescriptor.json\", JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.be.true;",
									"    ",
									"    ",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"Filters list of modules\", function () {",
									"    pm.expect(data1[0].name.toLowerCase()).to.contain(\"okapi\");",
									"   ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules.. : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=okapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							],
							"query": [
								{
									"key": "filter",
									"value": "okapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules?filter=okapi&preRelease=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e95fce1-7e27-477d-933d-169b8f28807e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    tv4.addSchema(\"ModuleDescriptor.json\", JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.be.true;",
									"    ",
									"    ",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"Filters list of modules\", function () {",
									"    pm.expect(data1[0].name.toLowerCase()).to.contain(\"okapi\");",
									"   ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules.. : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=okapi&preRelease=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							],
							"query": [
								{
									"key": "filter",
									"value": "okapi"
								},
								{
									"key": "preRelease",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules?filter=okapi&full=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ef2c53c-c0ac-4c07-a295-413fc1c0ed4d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    tv4.addSchema(\"ModuleDescriptor.json\", JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.variables.get(\"moduleListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data1[0]).to.have.all.keys(\"id\", \"name\", \"requires\",\"provides\", \"permissionSets\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules.. : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=okapi&full=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							],
							"query": [
								{
									"key": "filter",
									"value": "okapi"
								},
								{
									"key": "full",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52fffa08-d446-4c90-ae82-15f574a3cbff",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"newmoduleid\", response.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules : 201\");",
									"});",
									"",
									"pm.test(\"Location header is present \", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Location header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(\"/_/proxy/modules/test-basic-1.0.0\");",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(response).to.have.all.keys(\"id\", \"name\", \"requires\",\"provides\", \"launchDescriptor\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"test-basic-1.0.0\",\r\n  \"name\": \"Okapi test module\",\r\n  \"provides\": [\r\n    {\r\n      \"id\": \"test-basic\",\r\n      \"version\": \"2.2\",\r\n      \"handlers\": [\r\n        {\r\n          \"methods\": [ \"GET\", \"POST\" ],\r\n          \"pathPattern\": \"/testb\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"requires\": [],\r\n  \"launchDescriptor\": {\r\n    \"exec\": \"java -Dport=%p -jar okapi-test-module/target/okapi-test-module-fat.jar\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules/{{newmoduleid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eb5cc2c-93eb-4ec2-9dd2-a0d2a57c4515",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/proxy/modules/test-basic-1.0.0 : 200\");",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(response).to.have.all.keys(\"id\", \"name\", \"requires\",\"provides\", \"launchDescriptor\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules/{{newmoduleid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules",
								"{{newmoduleid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules{{newmoduleid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f200029b-a388-4c5f-9f4c-124a62c7cf3b",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"Methods for the module contain updated value\", function () {",
									"    pm.expect(response.provides[0].handlers[0].methods[2]).to.equal(\"DELETE\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules/test-basic-1.0.0\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{newmoduleid}}\",\r\n  \"name\": \"Okapi api test module\",\r\n  \"provides\": [\r\n    {\r\n      \"id\": \"test-basic\",\r\n      \"version\": \"2.3\",\r\n      \"handlers\": [\r\n        {\r\n          \"methods\": [ \"GET\", \"POST\", \"DELETE\" ],\r\n          \"pathPattern\": \"/testb\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"requires\": [],\r\n  \"launchDescriptor\": {\r\n    \"exec\": \"java -Dport=%p -jar okapi-test-module/target/okapi-test-module-fat.jar\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules/{{newmoduleid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules",
								"{{newmoduleid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules/{{newmoduleid}}  - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6fb8cb5-49b9-4cea-bb86-04e4332287d6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"enventrySchema\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"enventryListSchema\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"launchDescriptorSchema\")));",
									"    tv4.addSchema(\"UiModuleDescriptor.json\", JSON.parse(pm.variables.get(\"uiModuleDescriptorSchema\")));",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"    tv4.addSchema(\"InterfaceReference.json\", JSON.parse(pm.variables.get(\"interfaceReferenceSchema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.variables.get(\"moduleDescriptorSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"Methods for the module contain updated value\", function () {",
									"    pm.expect(response.provides[0].handlers[0].methods[2]).to.equal(\"DELETE\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/proxy/modules/test-basic-1.0.0 : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules/{{newmoduleid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules",
								"{{newmoduleid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules/{{newmoduleid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f33d3753-691e-4db8-942b-aa846e7202f5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain('/proxy/modules/test-basic-1.0.0 : 204');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules/{{newmoduleid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules",
								"{{newmoduleid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd57656c-5198-4c39-b96f-e0186ff986f9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cf56f0c5-ba81-43d4-b23f-ea265529da8a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "module - negative tests",
			"item": [
				{
					"name": "_/proxy/modules?orderBy=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0720d760-c24f-47e3-be78-d21854993adc",
								"type": "text/javascript",
								"exec": [
									"//this test should pass - name is a valid value",
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"    ",
									"     pm.response.to.be.withBody;",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Error message has expected value\", function () {",
									"    pm.expect(pm.response.text()).to.equal(\"unknown orderBy field: name\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?orderBy=name",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules - malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32c8a5a0-0dc5-4591-abec-d43757155c0f",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"  ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"test-basic-1.0.0\",\r\n  \"name\": \"Okapi test module\",\r\n  \"provides\": [\r\n    {\r\n      \"id\": \"test-basic\",\r\n      \"version\": \"2.2\",\r\n      \"handlers\": [\r\n        {\r\n          \"methods\": [ \"GET\", \"POST\" ],\r\n          \"pathPattern\": \"/testb\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"requires\": [],\r\n  \"launchDescriptor\": {\r\n    \"exec\": \"java -Dport=%p -jar okapi-test-module/target/okapi-test-module-fat.jar\"\r\n  }\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules -- missing semantic version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9392e615-75de-4475-8b94-9f09957c834b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"    ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Missing semantic version\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"test-basic\",\r\n  \"name\": \"Okapi test module\",\r\n  \"provides\": [\r\n    {\r\n      \"id\": \"test-basic\",\r\n      \"version\": \"2.2\",\r\n      \"handlers\": [\r\n        {\r\n          \"methods\": [ \"GET\", \"POST\" ],\r\n          \"pathPattern\": \"/testb\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"requires\": [],\r\n  \"launchDescriptor\": {\r\n    \"exec\": \"java -Dport=%p -jar okapi-test-module/target/okapi-test-module-fat.jar\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules -- missing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31fe48bb-ac7b-48cb-ac5d-ef7b52aefb42",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"    ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id is missing for module\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"misio\"\r\n }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules -- delete nonexisting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79a91dbd-f7b1-4dc4-8db5-eae22590471f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules",
								"foo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "interfaces",
			"item": [
				{
					"name": "/interfaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b3eff9b-020a-49fc-a6bd-4b6cc64834bb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"    ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"No suitable module found for path /_/proxy/interfaces\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/interfaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"interfaces"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tenants",
			"item": [
				{
					"name": "/tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0753e231-2898-4693-88e8-917c8fc2040f",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"console.log(response);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate that there is at least one tenant\", function() {",
									"  pm.expect(response.length).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.variables.get(\"tenantListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants : 200\");",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(response[0]).to.have.all.keys(\"id\", \"name\", \"description\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants  - required fields only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2164609f-d863-4002-accd-54676989161f",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"pm.environment.set(\"testtenantid\", data.id);",
									"",
									"",
									"pm.test(\"schema is valid\", function() {",
									"pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantDescriptorSchema\")))).to.be.true;",
									"pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants : 201\");",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data).to.have.all.keys(\"id\", \"name\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \n\t\"id\": \"fsetesting\",\n\t\"name\" : \"fsetestingtenants\"\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants - duplicate entry - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e1a75c6-cb75-42af-b330-bbeec70adc74",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test('Response contains correct error message', function() {",
									"   console.log(pm.response.text());",
									"   //pm.expect(pm.response.text()).to.include(\"Duplicate tenant id fsetesting\");",
									"",
									"});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"fsetesting\",\n\t\"description\": \"fse testing tenant\"\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants  - malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25b1d984-3cc1-43c8-85d6-4fca9adbb935",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response ihas a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.not.be.json; ",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \n\t\"id\": \n\t\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b865441-58c6-48c1-af5b-b8b588237d1c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"pm.test(\"schema is valid\", function() {",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantDescriptorSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get('testtenantid') +  \" : 200\");",
									"});",
									"",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data).to.have.all.keys('id', 'name');",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b31b4d94-f793-424c-99db-816c2202f7b9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantDescriptorSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"testtenantid\") + \" : 200\");",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data).to.have.all.keys('id','name','description');",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"fsetesting\",\n    \"name\": \"fsetestingtenants\",\n    \"description\": \"adding description\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}} - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a53e5bd5-38ec-4f5d-9de2-2577e523de06",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantDescriptorSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get('testtenantid') +  \" : 200\");",
									"});",
									"",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data).to.have.all.keys('id', 'name','description');",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1d54b57-d7ae-457b-b03f-2baaa2bc1b35",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get('testtenantid') +  \" : 204\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/foo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4e40bf0-d4c8-4c48-b0e3-72a3aeff23fd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/foo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59b07b0a-4525-43e8-ab8d-04c84e4dbddc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has a body\", function () {",
									"     pm.response.to.be.withBody;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Tenant.id=null id=foo\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"foo\",\n   \"description\" : \"foolish description\"\n\t\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/foo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "890035e3-e4a3-491a-a8bc-caad1ae90dc9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"foo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tenants/{id}/modules",
			"item": [
				{
					"name": "Setting up the test data",
					"item": [
						{
							"name": "/tenants  -- setting tennant for testing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "600cda84-306c-45c0-975b-22cba782314f",
										"type": "text/javascript",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"pm.environment.set(\"testtenantid\", data.id);",
											"",
											"",
											"pm.test(\"schema is valid\", function() {",
											"pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantDescriptorSchema\")))).to.be.true;",
											"pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response is valid json and has a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants : 201\");",
											"});",
											"",
											"pm.test('Results have expected key attributes', function() {",
											"  pm.expect(data).to.have.all.keys(\"id\", \"name\", \"description\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n\t\"id\": \"fsetestingmoduletenants\",\n\t\"name\" : \"fsetestingmoduletenants\",\n\t\"description\" : \"Testing module for a tenant\"\n}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "/modules -- setting module for testing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38c9ba6-0ed6-432e-823c-3f734f2d569b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"// find mod-permission that has no dependency",
											"var idx = 0;",
											"for (i = 0; i < response.length; i++) {",
											"    if (response[i].srvcId.startsWith(\"mod-perm\")) {",
											"        idx = i;",
											"        break;",
											"    }",
											"}",
											"",
											"pm.environment.set(\"testtenantmoduleid\", response[idx].srvcId);",
											"pm.environment.set(\"testnodeid\", response[idx].nodeId);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response must be valid and have a body\", function () {",
											"     pm.response.to.be.ok;",
											"     pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/modules : 200\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"discovery",
										"modules"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/tenants/{{xokapitenant}}/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6e5e03c-5e35-4806-9ce0-1421cf8f80fd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    tv4.addSchema(\"TenantModuleDescriptor.json\", JSON.parse(pm.variables.get(\"tenantModulDescriptorSchema\")));",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantModulDescriptorListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/modules : 200\");",
									"});",
									"",
									"pm.test('Tenant has modules', function() {",
									"  pm.expect(data.length).not.to.equal(0);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantmoduleid}}/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24b7316d-2500-4745-8119-0bdcb6f8ce42",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"testtenantid\") + \"/modules : 200\");",
									"});",
									"",
									"pm.test('Tenant does not have modules', function() {",
									"  pm.expect(data.length).to.equal(0);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "452a543e-8801-4862-bc1c-0d4acea08cde",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantModulDescriptorSchema\")))).to.be.true;",
									"pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"testtenantid\") +\"/modules : 201\");",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data).to.have.all.keys(\"id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17e2c498-d2fb-42e0-a82d-9a982dc261bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{testtenantmoduleid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}/modules - module added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecff9129-88f6-4629-871e-5067974a682a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"testtenantid\") + \"/modules : 200\");",
									"});",
									"",
									"",
									"pm.test('Tenant does not have modules', function() {",
									"  pm.expect(data.length).to.equal(1);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}/modules - invalid module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2773665f-329d-4bcd-90c8-10e5408578d3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.withBody;",
									"   ",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "993d285e-af1a-4eea-9678-217808540ee6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"nondeployedmodule\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}/modules/{{testtenantmoduleid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2233dfe-ec45-4914-9605-1420b4c817e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"response does not have a body\", function () {",
									"     pm.response.to.not.be.withBody;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"testtenantid\") + \"/modules/\" + pm.environment.get(\"testtenantmoduleid\") + \" : 204\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}/modules/{{testtenantmoduleid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}",
								"modules",
								"{{testtenantmoduleid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantmoduleid}}/modules - verify deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24b7316d-2500-4745-8119-0bdcb6f8ce42",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"testtenantid\") + \"/modules : 200\");",
									"});",
									"",
									"pm.test('Tenant does not have modules', function() {",
									"  pm.expect(data.length).to.equal(0);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{testtenantid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1d54b57-d7ae-457b-b03f-2baaa2bc1b35",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get('testtenantid') +  \" : 204\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testtenantid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testtenantid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tenants/{id}/interfaces",
			"item": [
				{
					"name": "/tenants/{{xokapitenant}}/interfaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2d43609-3d96-4a16-8aec-5f8730dcccee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"        pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"interfaceListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/interfaces : 200\");",
									"});",
									"",
									"pm.test('Tenant has interfaces', function() {",
									"  pm.expect(data.length).not.to.equal(0);",
									"});",
									"",
									"pm.environment.set(\"testinterfaceid\", data[0].id)",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{xokapitenant}}/interfaces?full=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4762c6d7-e5d4-46af-b652-9f38a111b6e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"        pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"interfaceListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/interfaces.. : 200\");",
									"});",
									"",
									"pm.test('Tenant has interfaces', function() {",
									"  pm.expect(data.length).not.to.equal(0);",
									"});",
									"",
									"// pm.test('Results have expected key attributes', function() {",
									"//   pm.expect(data[0]).to.have.all.keys(\"id\", \"version\", \"interfaceType\", \"handlers\");",
									"// });",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces?full=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces"
							],
							"query": [
								{
									"key": "full",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{xokapitenant}}/interfaces?full=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a304d31-dccb-4ec2-ae52-418428c2d435",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"        pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"interfaceListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/interfaces.. : 200\");",
									"});",
									"",
									"pm.test('Tenant has interfaces', function() {",
									"  pm.expect(data.length).not.to.equal(0);",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(data[0]).to.have.all.keys(\"id\", \"version\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces?full=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces"
							],
							"query": [
								{
									"key": "full",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/supertenant/interfaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef848e43-f0ee-4ddc-b59d-8423a1e7879b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"",
									"    tv4.addSchema(\"Permission.json\", JSON.parse(pm.variables.get(\"permissionSchema\")));",
									"    tv4.addSchema(\"RoutingEntry.json\", JSON.parse(pm.variables.get(\"routingEntrySchema\")));",
									"    tv4.addSchema(\"InterfaceDescriptor.json\", JSON.parse(pm.variables.get(\"interfaceDescriptorSchema\")));",
									"        pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"interfaceListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/supertenant/interfaces : 200\");",
									"});",
									"",
									"pm.test('Tenant has interfaces', function() {",
									"  pm.expect(data.length).not.to.equal(0);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/supertenant/interfaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"supertenant",
								"interfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/invalid_tenant/interfaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "265a726a-dbd3-4033-a9c9-f94efd56684f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response is valid and has a body\", function () {",
									"      pm.response.to.be.withBody;",
									"      pm.expect(pm.response.text()).to.equal(\"invalid_tenant\");",
									"    ",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/invalid_tenant/interfaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"invalid_tenant",
								"interfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{xokapitenant}}/interfaces/{{testinterfaceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e831c52-42bc-429a-88fb-22965ef16ee0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    tv4.addSchema(\"TenantModuleDescriptor.json\", JSON.parse(pm.variables.get(\"tenantModulDescriptorSchema\")));",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantModulDescriptorListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/interfaces/\" + pm.environment.get(\"testinterfaceid\") + \" : 200\");",
									"});",
									"",
									"pm.test('Interface is present in at least one module', function() {",
									"  pm.expect(data.length).not.to.equal(0);",
									"});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/{{testinterfaceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces",
								"{{testinterfaceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/invalid_tenant/interfaces/{{testinterfaceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "839ad32a-1bf8-4c6d-a073-18fb3c2c3b29",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.expect(pm.response.text()).to.be.equal(\"invalid_tenant\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/invalid_tenant/interfaces/{{testinterfaceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"invalid_tenant",
								"interfaces",
								"{{testinterfaceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/invalid_tenant/interfaces/invalid_interface",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "839ad32a-1bf8-4c6d-a073-18fb3c2c3b29",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.expect(pm.response.text()).to.be.equal(\"invalid_tenant\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/invalid_tenant/interfaces/invalid_interface",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"invalid_tenant",
								"interfaces",
								"invalid_interface"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tenants/{{xokapitenant}}/interfaces/invalid_interface",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c69d49db-487b-411d-b7f3-0b4aefd25d6a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response is valid json and has a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"schema is valid\", function() {",
									"    tv4.addSchema(\"TenantModuleDescriptor.json\", JSON.parse(pm.variables.get(\"tenantModulDescriptorSchema\")));",
									"    pm.expect(tv4.validate(data, JSON.parse(pm.variables.get(\"tenantModulDescriptorListSchema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/interfaces/invalid_interface : 200\");",
									"});",
									"",
									"pm.test('Interface is present in at least one module', function() {",
									"  pm.expect(data.length).to.equal(0);",
									"});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/invalid_interface",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces",
								"invalid_interface"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "health",
			"item": [
				{
					"name": "_/proxy/health",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba812cb6-1e2f-415c-83c6-599a53400886",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"title\": \"HealthStatusList\",",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"    \"title\": \"HealthStatus\",",
									"    \"type\": \"object\",",
									"    \"additionalProperties\" : false,",
									"    \"properties\": {",
									"         \"id\": {\"type\": \"string\"},",
									"         \"status\": {\"type\": \"string\"}",
									"     },",
									"  \"required\": [\"id\", \"status\"]",
									"    }",
									"};",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
									"});",
									"",
									"//check trace header",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/health : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/health",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "da90a5e7-a301-4199-8668-6976be8c9022",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a2465aac-c9f4-44b5-b2e5-91247b1cdb9a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "pull/modules",
			"item": [
				{
					"name": "/pull/modules - no url provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3a4cc43-7dde-4a4b-a37a-7e083a0b0530",
								"type": "text/javascript",
								"exec": [
									"// pm.test(\"Status is 404\", function () {",
									"//     pm.response.to.have.status(404);",
									"// });",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									" ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"urls\": []}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/pull/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"pull",
								"modules"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e6973dce-08ad-44bc-86cd-5c42e0e1afc3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0dc60a59-7e8e-46a9-a5ef-178a87af728e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7bce1c23-1d7c-4c6a-ab36-4731dbe8c316",
			"key": "tenantListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"TenantList\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\"type\": \"string\"},\n      \"name\": {\"type\": \"string\"},\n      \"description\": {\"type\": \"string\"}\n    }\n  }\n}",
			"type": "string"
		},
		{
			"id": "6d7433c2-2fc6-44f8-8f35-f602b8ca6f10",
			"key": "tenantDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"TenantDescriptor\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"id\": {\"type\": \"string\"},\n    \"name\": {\"type\": \"string\"},\n    \"description\": {\"type\": \"string\"}\n  },\n  \"required\": [\"id\", \"name\"]\n}",
			"type": "string"
		},
		{
			"id": "087b6788-7f23-44e8-97d5-f152b3de5349",
			"key": "tenantModulDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"TenantModuleDescriptor\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"id\": {\"type\": \"string\"},\n    \"from\": {\"type\": \"string\"},\n    \"action\" : {\n       \"type\" : \"string\",\n       \"enum\" : [ \"enable\", \"disable\", \"uptodate\", \"suggest\", \"conflict\" ]\n    },\n    \"message\": {\"type\": \"string\"}\n  },\n  \"required\" : [\"id\"]\n}",
			"type": "string"
		},
		{
			"id": "582bd9ff-bf1c-40cb-9c56-2aa064a49223",
			"key": "tenantModulDescriptorListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"TenantModuleDescriptorList\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"TenantModuleDescriptor.json\"\n  }\n}",
			"type": "string"
		},
		{
			"id": "692d147b-28e2-471e-86a8-5d54534afa80",
			"key": "nodeDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"NodeDescriptor\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"nodeId\": {\n      \"type\": \"string\"\n    },\n    \"url\": {\n      \"type\": \"string\"\n    },\n    \"nodeName\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"nodeId\", \"url\"]\n}",
			"type": "string"
		},
		{
			"id": "4bf5385f-936f-4e65-bf11-f9a2ab440262",
			"key": "nodeDescriptorListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"NodeDescriptorList\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"NodeDescriptor.json\"\n  }\n}",
			"type": "string"
		},
		{
			"id": "142fbf48-6044-416f-b735-366509a79213",
			"key": "moduleListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"ModuleList\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"ModuleDescriptor.json\"\n  }\n}",
			"type": "string"
		},
		{
			"id": "face5c4d-9de8-481b-9fca-3ebfce2df0e6",
			"key": "moduleDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"ModuleDescriptor\",\n  \"description\": \"A FOLIO Module\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"id\": {\n      \"description\": \"Module ID with format product-semver\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"description\": \"Short name for module (does not include version)\",\n      \"type\": \"string\"\n    },\n    \"replaces\": {\n      \"description\": \"List of modules that this replaces\",\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"Module name - without semantic version\",\n        \"type\": \"string\"\n      }\n    },\n    \"tags\" : {\n      \"description\": \"Module tags\",\n      \"type\" : [\"array\", \"null\"],\n      \"items\" : {\n        \"description\": \"Module tag\",\n        \"type\": \"string\"\n      }\n    },\n    \"requires\": {\n      \"description\": \"Required interfaces\",\n      \"type\": [\"array\", \"null\"],\n      \"items\": {\n        \"$ref\": \"InterfaceReference.json\"\n      }\n    },\n    \"provides\": {\n      \"description\": \"Provided interfaces\",\n      \"type\": [\"array\", \"null\"],\n      \"items\": {\n        \"$ref\": \"InterfaceDescriptor.json\"\n      }\n    },\n    \"filters\": {\n      \"description\": \"Provided filters\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"RoutingEntry.json\"\n      }\n    },\n    \"permissionSets\": {\n      \"description\": \"Module Permission Sets\",\n      \"type\": [\"array\", \"null\"],\n      \"items\": {\n        \"$ref\": \"Permission.json\"\n      }\n    },\n    \"env\" : {\n      \"description\": \"Supported environment variables\",\n      \"$ref\" : \"EnvEntryList.json\"\n    },\n    \"metadata\" : {\n      \"description\": \"Module Metadata (any object)\",\n      \"type\" : \"object\"\n    },\n    \"uiDescriptor\": {\n      \"description\": \"UI module descriptor\",\n      \"$ref\": \"UiModuleDescriptor.json\"\n    },\n    \"launchDescriptor\": {\n      \"description\": \"Default deployment for this module\",\n      \"$ref\": \"LaunchDescriptor.json\"\n    }\n  },\n  \"required\": [\"id\"]\n}",
			"type": "string"
		},
		{
			"id": "b2c850bd-0d6b-47af-9783-77cb693c2e90",
			"key": "interfaceReferenceSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"InterfaceReference\",\n  \"description\": \"A reference to an interfaceDescriptor, by name and version\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"id\", \"version\"]\n}",
			"type": "string"
		},
		{
			"id": "2d4a06c1-2e36-4eac-baf1-15a33fcfe3b8",
			"key": "interfaceDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"InterfaceDescriptor\",\n  \"description\": \"An interface that a module can provide\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"type\": \"string\"\n    },\n    \"interfaceType\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"handlers\": {\n      \"type\": [\"array\", \"null\"],\n      \"items\": {\n        \"$ref\": \"RoutingEntry.json\"\n      }\n    },\n    \"permissionSets\": {\n      \"type\": [\"array\", \"null\"],\n      \"items\": {\n        \"$ref\": \"Permission.json\"\n      }\n    }\n  },\n  \"required\": [\"id\", \"version\"]\n}",
			"type": "string"
		},
		{
			"id": "fd4c1e3c-a0ea-4ebb-ac6e-7ddbdeaabf57",
			"key": "routingEntrySchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"RoutingEntry\",\n  \"type\": \"object\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"methods\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"pathPattern\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"phase\": {\n        \"type\": \"string\"\n      },\n      \"level\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"redirectPath\": {\n        \"type\": \"string\"\n      },\n      \"permissionsRequired\": {\n        \"type\": [\"array\", \"null\"],\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"permissionsDesired\": {\n        \"type\": [\"array\", \"null\"],\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"ModulePermissions\": {\n        \"type\": [\"array\", \"null\"],\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}",
			"type": "string"
		},
		{
			"id": "8801629b-69b4-4843-8db2-d1a028fc4756",
			"key": "permissionSchema",
			"value": "{\n  \"title\": \"Permissions Definition Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"permissionName\": {\n      \"type\": \"string\"\n    },\n    \"displayName\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"tags\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"subPermissions\": {\n      \"type\": \"array\"\n    },\n    \"childOf\": {\n      \"type\": \"array\"\n    },\n    \"grantedTo\": {\n      \"type\": \"array\"\n    },\n    \"mutable\": {\n      \"type\": \"boolean\"\n    },\n    \"visible\" : {\n      \"type\" : \"boolean\"\n    },\n    \"metadata\" : {\n      \"type\" : \"object\",\n      \"$ref\" : \"../metadata.schema\"\n    }\n  },\n  \"additionalProperties\" : false\n}",
			"type": "string"
		},
		{
			"id": "1b452672-0ccd-427d-a60f-c37cf1f22baa",
			"key": "uiModuleDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"UiModuleDescriptor\",\n  \"type\": [\"object\", \"null\"],\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"npm\" : {\"type\" : [\"string\", \"null\"]},\n    \"url\" : {\"type\" : [\"string\", \"null\"]},\n    \"local\" : {\"type\" : [\"string\", \"null\"]},\n    \"args\" : {\"type\" : [\"string\", \"null\"]}\n  }\n}",
			"type": "string"
		},
		{
			"id": "b8756846-c2dd-49fd-b979-9e05f8b6aae8",
			"key": "launchDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"LaunchDescriptor\",\n  \"type\": [ \"object\", \"null\" ],\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"exec\": {\"type\": [\"string\", \"null\"]},\n    \"cmdlineStart\": {\"type\": [\"string\", \"null\"]},\n    \"cmdlineStop\": {\"type\": [\"string\", \"null\"]},\n    \"dockerImage\": {\"type\": [\"string\", \"null\"]},\n    \"dockerPull\": {\"type\": \"boolean\"},\n    \"dockerCMD\": {\n      \"type\": [\"array\", \"null\"],\n      \"items\": {\"type\": \"string\"}\n    },\n    \"dockerArgs\": {\n       \"type\": \"object\",\n       \"additionalProperties\": true\n    },\n    \"env\" : { \"$ref\": \"EnvEntryList.json\" }\n  }\n}\n",
			"type": "string"
		},
		{
			"id": "bb4f2bce-4cd0-435e-8fe7-97c941f3cb36",
			"key": "enventrySchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"EnvEntry\",\n  \"type\" : \"object\",\n  \"additionalProperties\" : false,\n  \"properties\" : {\n    \"name\" : {\"type\": \"string\"},\n    \"value\" : {\"type\": \"string\"},\n    \"description\" : {\"type\": \"string\"}\n  },\n  \"required\" : [\"name\"]\n}",
			"type": "string"
		},
		{
			"id": "806c2f5c-7650-47a1-be56-8977d53264ad",
			"key": "enventryListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"EnvEntryList\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"EnvEntry.json\"\n  }\n}",
			"type": "string"
		},
		{
			"id": "dd9c4756-4427-4f8c-a70b-32a805073b3b",
			"key": "interfaceListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"InterfaceList\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"InterfaceDescriptor.json\"\n  }\n}",
			"type": "string"
		},
		{
			"id": "18b04e67-4f14-4726-8bae-f3a782c71f23",
			"key": "deploymentDescriptorSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"DeploymentDescriptor\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"srvcId\": {\"type\": \"string\"},\n    \"instId\": {\"type\": \"string\"},\n    \"nodeId\": {\"type\": [\"string\", \"null\"]},\n    \"url\": {\"type\": [\"string\", \"null\"]},\n    \"descriptor\" : {\n      \"$ref\": \"LaunchDescriptor.json\"\n    }\n  },\n  \"required\": [\"srvcId\"]\n}",
			"type": "string"
		},
		{
			"id": "c74764af-3b95-417c-a53a-cf9dec8e9f78",
			"key": "deploymentDescriptorListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"DeploymentDescriptorList\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"DeploymentDescriptor.json\"\n  }\n}",
			"type": "string"
		}
	]
}