{
	"info": {
		"_postman_id": "93f82f79-9a18-47a0-842f-832aa54d8398",
		"name": "mod-kb-ebsco-java",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "schemas",
					"item": [
						{
							"name": "setup environment variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41dde41e-77c3-4f8a-a8e9-5125e58d8897",
										"exec": [
											"const moduleName = 'mod-kb-ebsco-java';",
											"pm.test(\"GET json schemas response OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"GET json schemas has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.test(\"GET contains ebsco-java module\", function () {",
											"    pm.expect(pm.response.text()).to.include(moduleName);",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"json.forEach((element) => {",
											"\tvar moduleId = element.id;",
											"\tif(moduleId.includes(moduleName)){",
											"\t\tpm.environment.set('kb-ebsco-java-module-id', moduleId);",
											"\t}",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/_jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{xokapitenant}}",
										"interfaces",
										"_jsonSchemas"
									]
								}
							},
							"response": []
						},
						{
							"name": "get schemas",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f7a44c0-1d29-496a-b969-2a33d35cf956",
										"exec": [
											"pm.test(\"GET schema_parameters OK\", function () {pm.response.to.be.ok;});",
											"",
											"pm.test(\"GET schema_parameters has JSON body\", function () {pm.response.to.have.jsonBody();});",
											"",
											"function checkVariableExist(name){return pm.environment.has(\"schema_\"+ name);}",
											"",
											"function setEnvironmentVariable(name, data){pm.environment.set(\"schema_\"+ name, data) }",
											"",
											"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
											"",
											"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
											"",
											"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
											"        pm.variables.get(\"url\") + \":\" + ",
											"        pm.variables.get(\"okapiport\") + ",
											"        \"/_/jsonSchemas?path=\" + path;",
											"}",
											"        ",
											"function getRequest(url){",
											"  const echoGetRequest = {",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"      'X-Okapi-Module-Id' : pm.variables.get(\"kb-ebsco-java-module-id\"),",
											"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
											"    }",
											"  }",
											"    return echoGetRequest;",
											"}        ",
											"",
											"function fetchSchema(echoGetRequest, delay){",
											"",
											"return new Promise((resolve, reject) => {",
											"     setTimeout(function(){",
											"       pm.sendRequest(echoGetRequest, (err, response) => {",
											"       if (!err) {",
											"        resolve(response.text());",
											"       }else{",
											"        reject(err, echoGetRequest);",
											"       }",
											"      });",
											"     }, delay);",
											"  });",
											"}",
											"",
											"function addAdditionalSchemas(data){",
											"    data.push(\"raml-util/schemas/tags.schema\");",
											"    data.push(\"raml-util/schemas/errors.schema\");",
											"    data.push(\"raml-util/schemas/error.schema\");",
											"    data.push(\"raml-util/schemas/metadata.schema\");",
											"    data.push(\"raml-util/schemas/uuid.schema\");",
											"}",
											"",
											"var interval = setTimeout(() => {}, 30000);",
											"function traverse(data){",
											"    addAdditionalSchemas(data);",
											"     var promises = Object.entries(data).map(([key, value]) => {",
											"         ",
											"        var url = getURL(value);",
											"        var request = getRequest(url);",
											"        ",
											"        return fetchSchema(request, 200 * key)",
											"        .then(function(response) {",
											"            response = replaceResponseRefWithName(response.toString());",
											"            var name = extractName(value);",
											"            if(!checkVariableExist(name)){",
											"                setEnvironmentVariable(name, response);",
											"            }",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"        });",
											"    });",
											"    ",
											"    Promise.all(promises)",
											"        .then(() => {",
											"            clearTimeout(interval)",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"            clearTimeout(interval);",
											"        });",
											"}",
											"",
											"traverse(JSON.parse(responseBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{kb-ebsco-java-module-id}}",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authentication",
					"item": [
						{
							"name": "/authn/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var token = postman.getResponseHeader(\"x-okapi-token\")",
											"pm.environment.set(\"xokapitoken\", token);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup permission",
					"item": [
						{
							"name": "Get user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"userId\", jsonData.user.id);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"bl-users",
										"by-username",
										"{{username}}"
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "Add permission if it doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var permissionExists = jsonData!==null && jsonData.permissions.filter(permission => (permission === \"kb-ebsco.all\")).length > 0;",
											"pm.environment.set(\"permissionExists\", permissionExists);",
											"",
											"if(!permissionExists) {",
											"    jsonData.permissions.push(\"kb-ebsco.all\")",
											"    ",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"    ",
											"    postman.setNextRequest(\"/authn/login\");",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup configuration",
					"item": [
						{
							"name": "Check if  url exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"apiUrlExists\", false);",
											"",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"apiUrlExists\", true);",
											"    pm.environment.set(\"rm-api-url-value\", jsonData.configs[0].value);",
											"    pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
											"    //\"rm api url exists -- do not overwrite\");",
											"    postman.setNextRequest(\"Check if customerId exists\");",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "/configurations/entries - POST RM API URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1999127b-87cf-45b8-a245-be854e138af4",
										"exec": [
											"",
											"pm.test(\"Success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store rm-api-url-id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-url-id\", body.id);",
											"",
											"pm.environment.set(\"rm-api-url-value\", body.value);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rmapi_url}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if customerId exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cf60b97-d5e9-4028-86ff-9b20ecc32dba",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"customerIdExists\", false);",
											"",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"customerIdExists\", true);",
											"    pm.environment.set(\"rm-api-custid-value\", jsonData.configs[0].value);",
											"    pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);",
											"     //\"rm api customer id exists -- do not overwrite\");",
											"    postman.setNextRequest(\"Check if apiKey exists\");",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "/configurations/entries - POST RM API api_customer id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23f25d7b-cbf3-4053-9fc3-35f06a3fffcc",
										"exec": [
											"",
											"pm.test(\"Success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store rm-api-customer-id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-customer-id\", body.id);",
											"pm.environment.set(\"rm-api-custid-value\", body.value);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{custid}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create customer id as part of configuration"
							},
							"response": []
						},
						{
							"name": "Check if apiKey exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30b0b57f-a25a-41b2-9390-f1e72c241b4c",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"apiKeyExists\", false);",
											"",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"apiKeyExists\", true);",
											"     //\"rm api key exists -- do not overwrite\");",
											"    pm.environment.set(\"rm-api-key-id\", jsonData.configs[0].id);",
											"    pm.environment.set(\"rm-api-key-value\", jsonData.configs[0].value);",
											"    ",
											"    postman.setNextRequest(\"First Test - Placeholder\");",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "/configurations/entries - POST RM API apiKey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "732d3a7c-3a6f-4f9b-b904-9cc6887ccdc3",
										"exec": [
											"",
											"pm.test(\"Success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store rm-api-key-id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-key-id\", body.id);",
											"pm.environment.set(\"rm-api-key-value\", body.value);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rmapi_api_key}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create customer id as part of configuration"
							},
							"response": []
						},
						{
							"name": "First Test - Placeholder",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4289e6d1-9e7e-43bf-b5e7-fca0899d4c09",
										"type": "text/javascript",
										"exec": [
											"//placeholder first test to jump to ",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7378bc5c-916f-41aa-b57e-b2c274efe3f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a26b4778-0c56-409b-93fe-f848a949171b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for tags",
					"item": [
						{
							"name": "Create custom package for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "807c50e4-0fd3-449b-b76f-26701581409c",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-created-for-tags-id\", response.data.id);",
											"        pm.environment.set(\"custom-package-created-for-tags-name\", response.data.attributes.name);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"  ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.variables.get(\"custom-package-tags-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1884122-c31a-406d-a50f-acfac0fb3298",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-tags-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package with multiple tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8f6b3ca-ed96-41f1-b648-105564fea3eb",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    pm.environment.set(\"tag-name-for-multiple-adding-a\", response.data.attributes.tags.tagList[0]);",
											"    pm.environment.set(\"tag-name-for-multiple-adding-b\", response.data.attributes.tags.tagList[1]);",
											"    ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('TagList is not empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tag in tagList matches with value",
											"    pm.test('Creating tagList', function(){",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"a-test\");",
											"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"b-test\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-created-for-tags-name}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"a-test\",\n    \t\t\t\"b-test\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9af17062-a2b8-4dbd-a75a-0492d740c1a1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f22f794-fce4-4958-8fb7-58a12332c7d2",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for packages test",
					"item": [
						{
							"name": "Create custom package for testing deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "807c50e4-0fd3-449b-b76f-26701581409c",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-id-created-in-post\", response.data.id);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"        ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1884122-c31a-406d-a50f-acfac0fb3298",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-one-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package1 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1352fcfd-1f54-4738-b034-a29b23948457",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "853601c2-1ee6-4609-b1c3-171eefdd39d2",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"    pm.environment.set(\"tagName\", response.data.attributes.tags.tagList[0]);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom package for testing deletion in PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4a4f293-fb41-4b09-8b13-015b296232e9",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-name-created-in-post-again\", response.data.attributes.name);",
											"        pm.environment.set(\"custom-package-id-created-in-post-again\", response.data.id);",
											"        pm.environment.set(\"provider-with-tags-id\", pm.environment.get(\"custom-package-id-created-in-post-again\").split('-')[0]);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-two-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf165d11-165f-4f3b-8ffd-11c238778635",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-two-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-two-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package2 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1352fcfd-1f54-4738-b034-a29b23948457",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "853601c2-1ee6-4609-b1c3-171eefdd39d2",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-again}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bedb142d-bc23-4284-837f-d3db06542991",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"var matchingPackages = jsonData.data.filter(\r",
											"  function(packageRecord) {\r",
											"    if (!packageRecord.attributes.isCustom && packageRecord.attributes.titleCount > 1) {\r",
											"      return packageRecord;\r",
											"    }\r",
											"  }\r",
											");\r",
											"\r",
											"pm.test('at least 1 matching package is returned from query', function() {\r",
											"  pm.expect(matchingPackages.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"if (matchingPackages.length > 0) {\r",
											"  pm.environment.set(\"partially-selected-package-id\", matchingPackages[0].id);\r",
											"} else {\r",
											"  console.log(\"Unable to find package id for testing partially selected packages\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[selected]=false",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "filter[selected]",
											"value": "false\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bedb142d-bc23-4284-837f-d3db06542991",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"partially-selected-package-resource-id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select 1 resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bedb142d-bc23-4284-837f-d3db06542991",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{partially-selected-package-resource-id}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{partially-selected-package-resource-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{partially-selected-package-resource-id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "360b68b9-cda9-4f18-aabb-84229468570b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ea03f74-742e-4515-9806-0569f2bef3f4",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for providers adding tags",
					"item": [
						{
							"name": "Update provider with adding tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755715d4-a377-454c-94d8-b3581049aba4",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1cb941-b309-47f0-9e80-e63939eede5e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{tagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second provider with tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755715d4-a377-454c-94d8-b3581049aba4",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54f3fd89-ec4d-47a2-92f6-e19237153170",
										"exec": [
											"pm.environment.set(\"secondTagName\", \"bar-tag\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{secondTagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90cdb0be-9630-4b1d-898d-e3e7b15ef87e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2eac4474-774a-4249-8211-eca997c04cf6",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for titles test",
					"item": [
						{
							"name": "GET Customer Specific Provider Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "768be071-6f5e-4c96-aba6-67836c7e8efa",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"if (jsonData.data.length > 0) {",
											"    pm.environment.set(\"custom-providerid\", jsonData.data[0].id);",
											"} else {",
											"    console.log(\"Unable to find customer specific provider id for custom title testing\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q={{custid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers"
									],
									"query": [
										{
											"key": "q",
											"value": "{{custid}}\n"
										}
									]
								},
								"description": "Retrieves unique id of the customer specific provider. All Custom Packages are created as part of a customer specific provider. "
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b94cf55d-e934-4cfb-aba0-764ceabcc156",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.environment.set(\"custom-packageid\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48db7d0e-1db4-405e-adf2-aec6a7ef90e8",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"package-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Update custom package3 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1352fcfd-1f54-4738-b034-a29b23948457",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "853601c2-1ee6-4609-b1c3-171eefdd39d2",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('Unknown');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"Unknown\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bedb142d-bc23-4284-837f-d3db06542991",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedPackages = jsonData.data.filter(",
											"    function(packageRecord) {",
											"        if (!packageRecord.attributes.isCustom) {",
											"           return packageRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed package is returned from query', function() {",
											"    pm.expect(managedPackages.length).to.be.above(0);",
											"});",
											"",
											"if (managedPackages.length > 0) {",
											"    pm.environment.set(\"managed-packageid\", managedPackages[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed package id for custom title testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=abc",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "q",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for resources test",
					"item": [
						{
							"name": "Create Custom Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0de9279-73e3-47b4-94a0-1ff3f00d5cea",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6df77f99-a1b9-4933-9816-740c1a58c876",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Title for duplicate check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0aeee6cd-d1a1-4a2b-b120-d57b829e8459",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titlename-for-resource-duplicate\", jsonData.data.attributes.name);",
											"pm.environment.set(\"custom-titleid-for-resource-duplicate\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d37b406-3a86-41a9-9135-a1f6b26f27b8",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid2\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid2}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6020686e-6a02-478e-8730-b1b4d8f5cb8d",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62d5ad95-9a23-4574-8959-30937c44bac9",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef282af4-8f48-4233-939d-12c102fe1cfd",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedTitles = jsonData.data.filter(",
											"    function(titleRecord) {",
											"        if (!titleRecord.attributes.isCustom) {",
											"           return titleRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed title is returned from query', function() {",
											"    pm.expect(managedTitles.length).to.be.above(0);",
											"});",
											"",
											"if (managedTitles.length > 0) {",
											"    pm.environment.set(\"managed-titleid\", managedTitles[0].id);",
											"    pm.environment.set(\"managed-titlename\", managedTitles[0].attributes.name);",
											"} else {",
											"    console.log(\"Unable to find managed title id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=abc",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e962c74-4135-4228-ae1e-a0e97223a780",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var managedResources = jsonData.included.filter(",
											"    function(resourceRecord) {",
											"        if (!resourceRecord.attributes.isPackageCustom) {",
											"           return resourceRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed resource is returned from query', function() {",
											"    pm.expect(managedResources.length).to.be.above(0);",
											"});",
											"",
											"if (managedResources.length > 0) {",
											"    pm.environment.set(\"managed-title-package-resourceid\", managedResources[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed resource id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{managed-titleid}}?include=resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{managed-titleid}}"
									],
									"query": [
										{
											"key": "include",
											"value": "resources\n"
										}
									]
								},
								"description": "Locate a random managed resource to test resource delete functionality"
							},
							"response": []
						},
						{
							"name": "Create custom title for tags test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "829bbc94-20b0-4f51-834e-674be8781c50",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-tags-test-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "048592e4-d76d-4e40-a7f0-107b1ad0673e",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-tags-test-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Custom package for resource tag test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aaaa70ef-bb53-4d81-ad76-e98c1831bd82",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-from-setup-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "add047c5-ad97-4aec-9f60-5b63ba6481c1",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-from-setup-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST add custom title to custom package with resource tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40c32a04-812c-4036-9261-b162a4059782",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store custom resource id for future reference in other tests/cleanup",
											"pm.environment.set(\"custom-resourceid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-from-setup}}\",\n      \"titleId\": \"{{custom-titleid-from-setup}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bafb2d0f-7c26-4bfa-af03-37aba39bf53f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d64b893-a28c-4fe4-ac71-2c929999c39b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.variables.get(\"custom-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tag-name-for-resource\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n          \"{{tag-name-for-resource}}\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add custom labels to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bafb2d0f-7c26-4bfa-af03-37aba39bf53f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d64b893-a28c-4fe4-ac71-2c929999c39b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is resources",
											"pm.test('type is resources', function(){",
											"    pm.expect(response.data.type).eq('resources');",
											"});",
											"    ",
											"    ",
											"// Test that attributes have the expected keys",
											"let attributes = response.data.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(attributes).to.be.an('object');",
											"    pm.expect(attributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
											"});",
											"",
											"//Check that userDefinedFields are correct",
											"pm.test('UserDefinedFields are correct', function(){",
											"    pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
											"    pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
											"    pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
											"    pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
											"    pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"resources\",\r\n    \"attributes\": {\r\n      \"isSelected\" : true,\r\n      \"userDefinedField1\" : \"test 1\",\r\n\t  \"userDefinedField2\" : \"test 2\",\r\n\t  \"userDefinedField3\" : \"test 3\",\r\n      \"userDefinedField4\" : \"test 4\",\r\n      \"userDefinedField5\" : \"test 5\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bafb2d0f-7c26-4bfa-af03-37aba39bf53f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"managed-resource-with-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d64b893-a28c-4fe4-ac71-2c929999c39b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('managed-resource-' + pm.variables.get(\"managed-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-resource-with-tags-uuid}}\",\n      \"tags\": {\n        \"tagList\": [\n          \"{{secondTagName}}\"\n        ]\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c2ce351-0727-43a5-b9b9-5c12191aef3e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95406201-bce1-4731-812e-432e7ecfd499",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
									"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
									"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
									"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
									"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
									"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
									"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
									"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for custom labels",
					"item": [
						{
							"name": "PUT /custom-labels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"//Get the first record",
											"let firstRecord = jsonData.data[0];",
											"    ",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in a record', function() {",
											"    pm.expect(firstRecord).to.be.an('object');",
											"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
											"    pm.expect(firstRecord.type).eq('customLabel');",
											"});",
											"",
											"// Test that attributes have the expected keys",
											"let firstAttributes = firstRecord.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(firstAttributes).to.be.an('object');",
											"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test custom label 1\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test custom label 2\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"custom-labels"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e76189-0586-4848-9c06-cf1309adc63a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27818619-580a-4b85-8157-573765a3515a",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_customLabelCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_customLabelCollectionItem\")));",
									"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
									"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for access types",
					"item": [
						{
							"name": "Create new access type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id1\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Subscribed\",\r\n    \"description\": \"some description\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "access-types",
			"item": [
				{
					"name": "GET access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypesCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is accessTypes",
													"        pm.expect(firstRecord.type).eq('accessTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"description\");",
													"        });",
													"    } else {",
													"        console.log(\"No Access types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "12a52873-660e-4d00-93ed-d14042c755c5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f48169e2-790e-4535-9deb-74f1e2c56d2a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.id) {",
													"    pm.expect(response.id).eq(pm.environment.get(\"access-type-id1\"));",
													"    ",
													"    pm.expect(response.type).eq('accessTypes');",
													"    ",
													"    pm.test('expected attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"    });",
													"    ",
													"    pm.test('expected creator are present', function() {",
													"        pm.expect(response.creator).to.be.an('object');",
													"        pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"    pm.test('expected metadata are present', function() {",
													"        pm.expect(response.metadata).to.be.an('object');",
													"        pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET missing access types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"Access type not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c8350463-b5b1-4f5b-8831-cd156524307b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a29c6649-3a61-447d-92f3-582f838eb342",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST to access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Create access type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"pm.test(\"Status is 201\", function () {",
													"    // pm.response.to.be.success;",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"    ",
													"pm.expect(response.type).eq('accessTypes');",
													"    ",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"});",
													"    ",
													"pm.test('expected creator are present', function() {",
													"    pm.expect(response.creator).to.be.an('object');",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"});",
													"    ",
													"pm.test('expected metadata are present', function() {",
													"    pm.expect(response.metadata).to.be.an('object');",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\");",
													"});",
													"    ",
													"// Store access type id for future reference in other tests/cleanup",
													"pm.environment.set(\"access-type-id2\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Subscribed updated\",\r\n    \"description\": \"Indicates subscription of the entity\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Create access type (with no type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n  \"attributes\": {\r\n    \"name\": \"Trial\",\r\n    \"description\": \"Indicates subscription of the entity\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with name too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 75 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo lig\",\r\n    \"description\": \"Indicates subscription of the entity\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with description too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid description\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"description is too long (maximum is 150 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Lorem ipsum\",\r\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis pa\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with unknown property)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.contain(\"Unrecognized field\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Lorem ipsum\",\r\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\"\r\n  },\r\n  \"unknownProperty\": \"unknownValue\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "977e9df3-2756-490e-a9bf-855e05141ea5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b42fed4-fa74-4310-a7e6-5eb622098a5e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update access-type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/access-types/\" + pm.environment.get(\"access-type-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check changes\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.type).to.equal(\"accessTypes\");",
													"        ",
													"        pm.test('expected attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"        ",
													"        pm.expect(response.attributes.name).to.equal(\"Subscribed updated\");",
													"        pm.expect(response.attributes.description).to.equal(\"Indicates subscription of the entity\");",
													"    });",
													"    ",
													"    pm.test('expected creator is present', function() {",
													"        pm.expect(response.creator).to.be.an('object');",
													"        pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"     pm.test('expected updater is present', function() {",
													"        pm.expect(response.updater).to.be.an('object');",
													"        pm.expect(response.updater).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"    pm.test('expected metadata are present', function() {",
													"        pm.expect(response.metadata).to.be.an('object');",
													"        pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Subscribed updated\",\r\n    \"description\": \"Indicates subscription of the entity\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contains('\\'id\\' parameter is incorrect');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Subscribed updated\",\r\n    \"description\": \"Indicates subscription of the entity\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "with not existed id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a240e65-ab76-434d-b3cb-755db3df2a02",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contain('not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c0b8e279-dd23-400c-ac96-50d328c5ca03",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"notExistedId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"accessTypes\",\r\n  \"attributes\": {\r\n    \"name\": \"Subscribed updated\",\r\n    \"description\": \"Indicates subscription of the entity\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{notExistedId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{notExistedId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "DELETE access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE already removed access-type ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contains(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0c3c7543-12b1-42db-923e-f3980419b6c0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f7ba8f2e-f5f2-4f20-9520-a1cad9edbdd5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "83d77cd2-8652-43de-b066-ff1e79130eab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "45626334-4d96-4bd9-8ad7-a699bce5e45f",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_accessTypesCollection.json\",pm.variables.get(\"schema_accessTypesCollection\"));",
							"tv4.addSchema(\"schema_accessTypeCollectionItem.json\", pm.variables.get(\"schema_accessTypeCollectionItem\"));",
							"tv4.addSchema(\"schema_accessTypeDataAttributes.json\",pm.variables.get(\"schema_accessTypeDataAttributes\"));",
							"tv4.addSchema(\"schema_userDisplayInfo.json\", pm.variables.get(\"schema_userDisplayInfo\"));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "providers",
			"item": [
				{
					"name": "GET provider collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7535d89f-ea29-4c2a-b43f-9665164c2643",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"supportsCustomPackages\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute types",
													"        pm.test('expected data.attributes types are present', function() {",
													"            pm.expect(firstRecord.attributes.name).to.be.a('string');",
													"            pm.expect(firstRecord.attributes.packagesTotal).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.packagesSelected).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.supportsCustomPackages).to.be.a('boolean');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"packages\")",
													"        });",
													"        ",
													"        //Test that relationships.packages has expected attributes",
													"        pm.test('expected relationships.packages are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages).to.include.all.keys(\"meta\")",
													"        });",
													"        ",
													"        //Test that relationships.packages.meta has expected attributes",
													"        pm.test('expected relationships.packages.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that packages are not included in relationships",
													"        pm.test('relationships meta should not include packages', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No providers found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        })",
													"        //Test that name contains either basket or weaving in it",
													"        pm.test('name contains query string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('Basket');",
													"        })",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Basket",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Basket"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb98be54-cc50-4a39-90f8-f5f8094aa6aa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that 12 records equal to or less than count are in response",
													"        pm.test('number of records less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(15);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=12",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbe1cd5e-491c-4d04-b141-57df864b14aa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that number of records returned are less than or equal to count",
													"        pm.test('number of provider records returned are less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&page=1&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "436225e9-d41b-4662-a6d0-83bbb173e19a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"let len = response.data.length;",
													"pm.test('response contains 1 provider', function() {",
													"    pm.expect(len).to.eq(1);",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with non-existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response is empty', function() {",
													"    pm.expect(len).to.eq(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce6ea304-07ef-49d7-a694-8e534d546b08",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"non-existing-tag\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with list of tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response contains both providers with tags', function() {",
													"    pm.expect(len).to.eq(2);",
													"});",
													"",
													"function providerByIdRequest(id){",
													"    return {",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"    }",
													"}",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[0].id), function(err, res) {",
													"    pm.test(\"Check name of second tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"secondTagName\"));",
													"    });",
													"});",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[1].id), function(err, res) {",
													"    pm.test(\"Check name of first tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce6ea304-07ef-49d7-a694-8e534d546b08",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}},{{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}},{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcec05af-8078-4ada-8e3b-758807147ddf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57c55629-9377-4fe0-a65d-2e3f26dbfb61",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid sort parameter');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=invalidsort",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "invalidsort"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b41a46be-1049-4a73-939b-6dc62086ffed",
												"exec": [
													"let response = pm.response;",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d486b5a-f089-4b32-9095-ececf2e3ae6c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq('18');",
													"});    ",
													"",
													"//Test that type is providers",
													"pm.test('type is providers', function(){",
													"    pm.expect(response.data.type).eq('providers');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"providerToken\",\"supportsCustomPackages\", \"proxy\");",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId including packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f1e04a3-e242-4dac-b1fe-af20d8fb0415",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that packages are included in relationships",
													"pm.test('relationships meta should include packages', function() {",
													"    pm.expect(response.data.relationships.packages.data).is.not.empty;",
													"});",
													"",
													"//Test that list of packages are included",
													"pm.test('include packages list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No packages included\");",
													"    } else {",
													"        //Test that packages are included",
													"        pm.test('should include packages', function() {",
													"            pm.expect(response.included[0].type).to.eq('packages');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": "packages"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2539e1f4-a134-4ed7-8aeb-940a6bc5c3cd",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0fe511e-eec1-4ce1-878c-e009e01fe9bf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Provider id is invalid - and');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/and",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"and"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca4030e7-08f5-43f6-bb86-6c40dc31c5c5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update proxy - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48b0d34f-ec96-49de-ad74-1dfa17e999f9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that proxy value matches value passed in",
													"if (Object.keys(response.data.attributes.proxy).length !== 0) {",
													"    pm.test(\"Proxy id matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.proxy.id).eq('<n>');",
													"    });",
													"} else {",
													"    console.log(\"Proxy not updated as expected\");",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"19\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 19,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff4bde3f-f6e2-4946-8892-40234718d31c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"18\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"factName\", \"prompt\", \"helpText\", \"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('hello test token');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"18\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 7,\n      \"providerToken\": {\n        \"factName\": \"[[galesiteid]]\",\n        \"prompt\": \"/itweb/\",\n        \"helpText\": \"<ul>\\r\\n    <li>Enter your Gale<sup>®</sup> site ID in the space provided below. The site ID may contain a combination of alpha/numeric characters, varying in length. <blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n    <p> Example: The site ID immediately follows /itweb/ in a URL. The site ID in the following URL is <i>aa11bb22</i>. </p>\\r\\n    </blockquote></li>\\r\\n</ul>\\r\\n<blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\"><blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n<p><span style=\\\"text-decoration: underline;\\\">http://infotrac.galegroup.com/itweb/aa11bb22?db=AIM</span></p>\\r\\n</blockquote></blockquote><br />\\r\\n<ul>\\r\\n    <li>If no site ID is specified, your Gale Group links may not function properly, as Gale Group requires this information for authentication. </li>\\r\\n    <li>If you are unable to locate the site ID, please contact Gale Group. For contact information, visit: <a href=\\\"http://access.gale.com/authentication/\\\">http://access.gale.com/authentication/</a>. </li>\\r\\n</ul>\\r\\n\",\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": true\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token when value is number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e099b521-e229-4faf-8efa-882154dae668",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('123');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": 123\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"<n>\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update proxy - invalid proxy id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bec090d3-fab0-4d44-9f88-77d4cab3ca51",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": null\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"invalid\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update request - invalid json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52dd8ee3-f407-4226-9b33-6be2857b40e5",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed.",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update provider tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfd8e1ba-9886-4d30-86d1-283899a48f28",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update provider tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfd8e1ba-9886-4d30-86d1-283899a48f28",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET packages included to provider",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "for provider that exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "252c3079-2899-4e60-8692-2483d29ad85b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\")",
													"        });",
													"        ",
													"        //Test that providerId matches what we passed in ",
													"        pm.test('providerId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.providerId).to.eq(19);",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\", \"provider\")",
													"        });",
													"    ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No packages found for this provider');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "q and count and sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c2a12ad-af4a-4a02-ad01-a5c1572ac6f9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"            pm.expect(secondRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"            pm.expect(secondRecord.attributes.name).to.include('Search');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c0b1aa3-a4a5-479c-a06e-9b41cf027bee",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] and filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f3fba6-12ea-4671-b900-3eae020e17d9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"        ",
													"        //Test that contentType matches whats passed in query",
													"        pm.test('check contentType', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Aggregated Full Text');",
													"        });",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=aggregatedfulltext",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "aggregatedfulltext"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"//Test that particular package has a correct tag list",
													"pm.test('Particular package has a correct tag list', function(){",
													"    pm.expect(response.data[0].attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q={{custom-package-name-created-in-post-again}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "{{custom-package-name-created-in-post-again}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId and valid query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=E-Journal",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "E-Journal"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered by tags ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5b574a6-a138-4954-9ca3-7119623b24b2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tagOne = pm.environment.get(\"tag-name-for-multiple-adding-a\");",
													"    var tagTwo = pm.environment.get(\"tag-name-for-multiple-adding-b\");",
													"    pm.expect(_.includes(responseTags,tagOne)).to.eq(true);",
													"    pm.expect(_.includes(responseTags,tagTwo)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(2); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d8d645a-1993-4cde-8bf3-d6d17b729211",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[tags]={{tag-name-for-multiple-adding-a}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "538799ae-0b40-4376-966a-333c2e8021a3",
												"exec": [
													"var packageId = pm.environment.get(\"custom-package-created-for-tags-id\");",
													"var providerId = packageId.split(\"-\")[0];",
													"pm.environment.set(\"provider-id\", providerId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c625d97b-c2db-4973-b74b-3460cfe8082d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-id}}/packages?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "for non-existing provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8f0d0d1-f485-47c3-b783-65d618388eec",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(response.errors[0].title).eq(\"Search parameter cannot be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5d7ac73f-ad7a-436d-b01b-b8af2d555068",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4107bfa1-7d75-4212-a1c6-7f084d0d31de",
												"exec": [
													"//Ensure that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that response contains expected error message",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													"",
													"//Check that X-Okapi-Trace header is present",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "q and sort param invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1681ef9a-06f2-4a09-8dd1-6dca2e1a00a8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for sort');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "filter[selected] invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1a0ae87-540c-47b8-a003-2975d04ce8cc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//This should actually be a 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[selected]');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87060553-7e9d-49b6-ae25-d615196b7643",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[type]');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=unsupported",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "unsupported"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "461f1d29-f4ec-417d-ad4e-e02eb5ccfe2b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b15e82-d116-4bf0-8a08-a8be15ed97ce",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77861d0b-465c-4a78-b026-a9fa13fe4ed0",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "88241cbf-559b-4e80-a29d-281c6147fb8f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ddd78cdc-06a1-4430-bd18-8fd2ca230fd0",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
							"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
							"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
							"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "packages",
			"item": [
				{
					"name": "GET package collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe95e230-757f-44ab-b631-b1b7c3511575",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
													"            \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\");",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\")",
													"        });",
													"        ",
													"        //Test that relationships.resources has expected attributes",
													"        pm.test('expected relationships.resources are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources).to.include.all.keys(\"meta\");",
													"        });",
													"        ",
													"        //Test that relationships.resources.meta has expected attributes",
													"        pm.test('expected relationships.resources.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No packages found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "835a3c5b-e240-4b7d-97c6-09cf500b7cd4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"",
													"        //Test that query string is present in package name",
													"        pm.test('query string is present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    } else {",
													"        console.log('No packages found for this query search');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39f4da6d-1f14-415d-a14c-6b37a10a8c7b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that query string is present in package name",
													"        pm.test('query string present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7532dfe5-001f-4bea-a58a-0b7cb05419b8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let totalResults;",
													"if(response.meta) {",
													"    totalResults = response.meta.totalResults;",
													"}",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(7);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Ensure that total results is greater than count",
													"        pm.test('totalResults greater than count', function() {",
													"            pm.expect(len) < totalResults;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=7",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d67c6e12-513c-4d82-b907-88668b9a06cb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eec1c38d-cda0-4a94-adf7-9286f4778d46",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        pm.variables.set(\"packagename-pageone\", response.data[0].attributes.name);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset two",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae051a46-6975-4ff3-8c26-43eacc903f9c",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        let firstRecordPageTwo = response.data[0].attributes.name;",
													"        ",
													"        //Check that page 1 and page 2 do not have same records",
													"        pm.test('page 1 and page 2 should not have same records', function() {",
													"            pm.expect(pm.variables.get(\"packagename-pageone\")).to.not.eql('firstRecordPageTwo');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid sort - by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a003047-de40-45c8-bc3b-5d2079b6a2ed",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=true&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] multiple param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-a\"));",
													"        pm.expect(response.data.attributes.tags.tagList[1]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-b\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tag-name-for-multiple-adding-a}},{{tag-name-for-multiple-adding-b}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}},{{tag-name-for-multiple-adding-b}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] with non existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce6ea304-07ef-49d7-a694-8e534d546b08",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"nonExisting\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec9e51f0-e022-4ba7-8726-fda81bea0ff7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).eq(5);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that contentType matches passed value",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Abstract and Index');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=abstractandindex&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "abstractandindex"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "569906b9-8e70-4313-b3f8-7d6cbf10f6d3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name.toLowerCase()).to.include('package');",
													"            pm.globals.set(\"custom-package-name-that-exists\", firstRecord.attributes.name);",
													"        });",
													"        ",
													"        //Test that isCustom is true",
													"        pm.test('check isCustom', function() {",
													"            pm.expect(firstRecord.attributes.isCustom).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with empty search string q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69dd3f20-06a4-45ae-b55a-c143cc5adb9f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that we get the expected error message",
													"    pm.test('Ensure that errors title is as expected', function() {",
													"        pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9fe2d43-efed-4c6a-90d4-2d2cefad5455",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort filter param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42e1cd49-f2de-4358-8901-e7159cf96f7e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for sort');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f83915f8-c8f0-46e3-a75f-a06898a06383",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[selected]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "483a058a-632c-447d-8eec-d885ac1bbb42",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[type]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4ebc75e-336c-4beb-b4df-ea40f74b8d80",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[custom]=invalid&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[custom]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9dedb2e-a77c-4205-9f60-f26c69ad9d12",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"// Per https://issues.folio.org/browse/UIEH-483 -- only true is allowed",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=false&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "false"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c10ca890-de00-47ce-abf8-b6c2f8dddca5",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST to package collection",
					"item": [
						{
							"name": "With Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package with access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "807c50e4-0fd3-449b-b76f-26701581409c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid2\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom package');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"    //Test that accessType is assigned",
															"    pm.test('accessType is assigned', function() {",
															"        pm.expect(response.data.relationships.accessType.data.id).to.eq(pm.environment.get(\"access-type-id2\"));",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3b911c48-099e-4169-9d40-80533bd2425f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom package\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"{{access-type-id2}}\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5782156b-ddc1-42f2-a202-ec4865bfbbbd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8ef4675a-f191-4697-bcce-9000e1316826",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create custom package with invalid access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "807c50e4-0fd3-449b-b76f-26701581409c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function() {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.accessTypeId');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('9999');",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom package\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"9999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create custom package with missing access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50e4af93-4308-4650-b077-2ea16c8d2a27",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Access type not found by id: 99999999-9999-1999-a999-999999999999');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"99999999-9999-1999-a999-999999999999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Without Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "807c50e4-0fd3-449b-b76f-26701581409c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid1\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom packages api test valid');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "with package name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50e4af93-4308-4650-b077-2ea16c8d2a27",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Custom Package with the provided name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "with invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a79977ad-8b87-4104-b668-40e38a6afe02",
														"exec": [
															"//Check that status is 400",
															"// This test should be re-visited after https://issues.folio.org/browse/UIEH-488 is fixed.",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": 123,\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "bad data for customCoverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c3b36baa-ce08-4c77-b71a-65d41a4b8bd0",
														"exec": [
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"123\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": 2003-01-01,\n\t\t\t\t\"endCoverage\": 2003-12-01\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ca5f984d-f290-418b-b995-16e6b818abf3",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"   pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.name');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without content type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cd23092d-ad62-4671-9ecc-84adb25a0378",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.contentType');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"xxx\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78da614c-e37e-4f16-a7cf-936e68e22bc5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data.type).eq('packages');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
													"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "121ce590-7390-4ac7-994d-d93f5d3fab06",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});",
													"",
													"//Test that provider is included in relationships",
													"pm.test('relationships meta should include provider', function() {",
													"    pm.expect(response.data.relationships.provider.data).is.not.empty;",
													"});",
													"",
													"//Test that provider is included",
													"pm.test('include provider', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No provider included\");",
													"    } else {",
													"        //Test that provider is included",
													"        pm.test('should include provider', function() {",
													"            pm.expect(response.included[0].type).to.eq('providers');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "121ce590-7390-4ac7-994d-d93f5d3fab06",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            pm.expect(response.included[0].type).to.eq('resources');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "121ce590-7390-4ac7-994d-d93f5d3fab06",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let firstRecord = response.included[0];",
													"            pm.expect(firstRecord.type).to.eq('resources');",
													"            pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(firstRecord.attributes.userDefinedField3).eq(\"test 3\");",
													"            pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5b574a6-a138-4954-9ca3-7119623b24b2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d8d645a-1993-4cde-8bf3-d6d17b729211",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and empty included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5b574a6-a138-4954-9ca3-7119623b24b2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that record has empty tag list",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(0); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d8d645a-1993-4cde-8bf3-d6d17b729211",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources filtered by tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5b574a6-a138-4954-9ca3-7119623b24b2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d8d645a-1993-4cde-8bf3-d6d17b729211",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]={{tag-name-for-resource}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-resource}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and including resources non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "538799ae-0b40-4376-966a-333c2e8021a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c625d97b-c2db-4973-b74b-3460cfe8082d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources empty tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "538799ae-0b40-4376-966a-333c2e8021a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c625d97b-c2db-4973-b74b-3460cfe8082d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf9e78a-2432-4263-a74d-171c5680cb62",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94ac8c29-1a6b-46cf-a9f2-3c7f9acf4285",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80f21569-5141-4ab4-a86f-27ddb77e9f2e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cd4ab39-0383-435d-9d53-ab821668fbd3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId with providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b904a74-9813-4239-ab20-9b4787115b4f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24db3639-5daf-4169-9ad0-e0f2bf505133",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "106f6acb-a79d-4fb0-87c7-3deb64c7d253",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT package by packageId",
					"item": [
						{
							"name": "Custom Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update custom package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfd8e1ba-9886-4d30-86d1-283899a48f28",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "visibility data and coverage update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "301a2429-04c2-4ebc-b71b-5a1f64acca2c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.false;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2004-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2004-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2004-01-01\",\n        \"endCoverage\": \"2004-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update custom package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "110f2939-ad30-406a-9074-e3bf05f43fb4",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1257c13b-620f-4ee0-a1d3-e90bc6acba18",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"some test custom package\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "256f95b4-827a-4ee6-b316-f9e8c6e23037",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "aa4f6bef-01a6-42c5-9582-71dee701cf91",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"{{custom-package-name-that-exists}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with isSelected false should delete it",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eb2e7fc5-bb68-457e-bc47-447e4ebc8f67",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 404",
															"pm.test(\"Status is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package not found');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"random test package\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": false,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post-again}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6988fa9-e19d-4319-acab-0486899854e8",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"hello world\",\n      \"contentType\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update managed package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b350358-c50d-431a-8891-635afafb9d77",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that allowKbToAddTitles matches as provided in request",
															"pm.test('allowKbToAddTitles matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.allowKbToAddTitles).to.be.true;",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=false",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b350358-c50d-431a-8891-635afafb9d77",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were not selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.not.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-01-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-02-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-01-12\",\n        \"endCoverage\": \"2018-02-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : false,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=true",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b350358-c50d-431a-8891-635afafb9d77",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were all selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-03-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-04-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-03-12\",\n        \"endCoverage\": \"2018-04-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : true,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "invalid dates for coverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35fd9abe-ff7a-441b-ba68-11529d2d00db",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid beginCoverage');",
															"        pm.expect(response.errors[0].detail).to.eq('beginCoverage has invalid format. Should be YYYY-MM-DD');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"13-08-2018\",\n        \"endCoverage\": \"13-09-2018\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isSelected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab9b4cb8-0847-4426-968a-4015d2df8d0f",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": \"invalid\",\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-12\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isHidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93ca8f23-f8a4-4a77-82bd-d898f94a214b",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": \"invalid\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid allowKbToAddTitles",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9f78de4-a7d9-41ff-b1aa-7d135f74530c",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid json in request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ac2914b6-ff59-4e3c-b990-000db174b758",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": 13-08-2018,\n        \"endCoverage\": 13-09-2018\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update package tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfd8e1ba-9886-4d30-86d1-283899a48f28",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update package tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfd8e1ba-9886-4d30-86d1-283899a48f28",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										},
										{
											"name": "update package tags without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1257c13b-620f-4ee0-a1d3-e90bc6acba18",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": null,\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Delete custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a82bad3-3794-4e96-a832-9726afc45c8f",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-package-id-created-in-post}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid providerId in packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a500736-5692-48d5-a2b3-be1a3a7abcb8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that appropriate error message is being returned",
													"pm.test('Ensure that appropriate error message is returned', function(){",
													"    pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b141bf4d-bf91-477f-a103-294bdbaedb39",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete a managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "516aae59-b197-4a2d-90ed-44116368e5f1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package cannot be deleted');",
													"        pm.expect(response.errors[0].detail).to.eq('Invalid package');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "42344117-38e1-41a8-b404-45a43fd7196c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4a277e22-a7ab-420f-90f1-318ca03e2ddd",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageTagsItem.json\", JSON.parse(pm.variables.get(\"schema_packageTagsItem\")));",
							"tv4.addSchema(\"schema_packageTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "resources",
			"item": [
				{
					"name": "POST resource",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources POST add managed title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45f8c974-02a8-474a-b769-d42bf8308cb8",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"managed-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{managed-titleid}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89a78baa-1162-4a51-be16-45f9fdb93525",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"custom-titleid-for-resource\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources POST add managed title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a017e03-04ad-4294-9f32-7c42c8960b61",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{managed-titleid}}\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c77640c-91bb-4473-a4c2-4f4b9c8e586f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6eb35ce2-e2ee-4883-af09-6868749244b0",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// confirm error returns invalid url",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Url has invalid format\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"not a url\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f0cb914-4fd1-4981-b03d-417c4ea4951c",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(jsonData.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(jsonData.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"1\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid titleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4af84564-df1c-4860-a1c8-fc7d06e70f67",
												"exec": [
													"",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"1\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a26f756-9f2b-4fdc-8d52-38a2e56692fb",
												"exec": [
													" pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected error message is returned\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.be.equal('Content-type header must be [\"application/vnd.api+json\"] but it is \"application/json\"');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources GET specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3229617c-2009-4392-800a-051cda9ddc4e",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"managed-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource (custom title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84bee548-e399-4759-bf34-09229ee1bbef",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84bee548-e399-4759-bf34-09229ee1bbef",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"});",
													"",
													"pm.test(\"userDefinedFields are present\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"    pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"    pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"    pm.expect(firstRecord.attributes.userDefinedField3).eq(\"test 3\");",
													"    pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"    pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3f33bb8-6339-425f-88db-2ff6d42d86a1",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"providers\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.providerId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4a87a3e-885e-40de-8e41-c2975fd64d95",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.packageId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "514fa72e-d1ea-4aad-904b-896efc98606e",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.titleId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider,package,title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4031b837-11a2-422d-b781-baebc5ac6b9c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"    ",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 3 records and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(3);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"     ",
													"var includedTitles = includedItems.filter(",
													"        function(titles) {",
													"            if (titles.type.toLowerCase().includes(\"titles\")) {",
													"               return titles;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included title is as expected', function() {",
													"    pm.expect(includedTitles.length).eq(1);",
													"    pm.expect(includedTitles[0].id).eq(firstAttributes.titleId.toString());",
													"});     ",
													"",
													"var includedPackages = includedItems.filter(",
													"        function(packages) {",
													"            if (packages.type.toLowerCase().includes(\"packages\")) {",
													"               return packages;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included package is as expected', function() {",
													"    pm.expect(includedPackages.length).eq(1);",
													"    pm.expect(includedPackages[0].id).eq(firstAttributes.packageId.toString());",
													"});          ",
													"",
													"var includedProvider = includedItems.filter(",
													"        function(providers) {",
													"            if (providers.type.toLowerCase().includes(\"providers\")) {",
													"               return providers;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included provider is as expected', function() {",
													"    pm.expect(includedProvider.length).eq(1);",
													"    pm.expect(includedProvider[0].id).eq(firstAttributes.providerId.toString());",
													"});           ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider,package,title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider,package,title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9c78e68-9d4b-4bfd-b346-a7b93cc5f3d5",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid-from-setup\"));",
													"});",
													"",
													"pm.test('resource tags expected', function() {",
													"    pm.expect(firstAttributes.tags.tagList).to.be.an('array').that.is.not.empty;",
													"});",
													"  ",
													"pm.test(\"resource tags size as expected\", function () {",
													"   pm.expect(Object.keys(firstAttributes.tags.tagList).length).to.eql(1);",
													"});",
													"",
													"pm.test(\"tags content as expected\", function () {",
													"   pm.expect(firstAttributes.tags.tagList[0]).to.eql(\"tag one\");",
													"});  ",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources GET invalid resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "131ade68-03b3-42dd-b257-3da5a3cf3a1b",
												"exec": [
													"// status should be 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Errors array should return a more relevant response",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and invalid include",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6649ece-5a31-4912-b9f7-fe3a0bec9996",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes and invalid include is ignored",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cebc5686-0ec1-4cf3-ae68-00ae46f638a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8c1acddd-c978-42f0-8887-03978e7dd10b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT resource by resourceId",
					"item": [
						{
							"name": "Custom Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update custom resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1bbccb9f-00b3-497f-bc84-db593ca5f27a",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custom embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": \"{{custom-providerid}}\",\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"customEmbargoPeriod\": {\n        \"embargoUnit\": \"Months\",\n        \"embargoValue\": 5\n      },\n      \"customCoverages\": [\n        {\n          \"beginCoverage\": \"2001-01-01\",\n          \"endCoverage\": \"2004-02-01\"\n        }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n      \"publisherName\": \"test publisher\",\n      \"edition\": \"test edition\",\n      \"description\": \"test description\",\n      \"subjects\": [],\n      \"contributors\": [\n        {\n          \"type\": \"author\",\n          \"contributor\": \"smith, john\"\n        },\n        {\n          \"type\": \"illustrator\",\n          \"contributor\": \"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n          \"id\": \"11-2222-3333\",\n          \"type\": \"ISSN\",\n          \"subtype\": \"Online\"\n        }\n      ],\n      \"isTitleCustom\": true,\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource - custom only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ae2da187-5d56-41af-8eb4-8e362b0004b6",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"url is as expected\", function () {",
															"   pm.expect(firstAttributes.url).to.eql(\"https://test\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ac19979a-6f62-4778-b688-ac03fe5b2f41",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"isSelected\" : true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"url\": \"https://test\",\n      \"visibilityData\": {\n        \"isHidden\" : false\n      },\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update custom resource invalid url",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b06b7a5a-202c-45b8-96cc-fa12dfa39069",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"   pm.expect(jsonData.errors.length).to.eql(1);",
															"   pm.expect(jsonData.errors[0].title).to.equal(\"Invalid url\");",
															"   pm.expect(jsonData.errors[0].detail).to.equal(\"url has invalid format. Should start with https:// or http://\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "73d82c84-122a-4314-bbe2-6bbdb34e982b",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isPeerReviewed\": false,\n      \"name\": \"custom title-b72f107f-ceff-49e1-8a3f-e7a9b8dffa13\",\n      \"publicationType\": \"Book\",\n     \"isSelected\": true,\n      \"url\": \"not a url\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid proxy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b13dea4e-6435-4cac-bb59-a1730bc713d1",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Proxy ID\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "277fe43d-4760-49a2-975d-34947faa4ab6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n     \"isSelected\": true,\n      \"visibilityData\": {\n    \t\"isHidden\" : false\n      },\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Days\",\n      \"embargoValue\" : 5\n      },\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-01\",\n      \"endCoverage\" : \"2004-02-01\"\n      }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\" : {\n      \"id\" : \"invalid\"\n      },\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"url\": \"https://test\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid coverageStatement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6fae833a-63c5-49f6-b981-82d782c6c0c1",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7d0514e8-3021-4a00-9ab8-4f98eaf6bb81",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": {{custom-providerid}},\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n    \t\"isHidden\" : false\n      },\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Days\",\n      \"embargoValue\" : 5\n      },\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-01\",\n      \"endCoverage\" : \"2004-02-01\"\n      }\n      ],\n      \"coverageStatement\": \"{{long-coverage}}\",\n      \"proxy\" : {\n      \"id\" : \"<n>\"\n      },\n     \n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid customCoverages",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7381f54-f2ad-443f-8cb1-f82d441d7ea4",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"BeginCoverage should be smaller than EndCoverage.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": {{custom-providerid}},\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n    \t\"isHidden\" : false\n      },\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Days\",\n      \"embargoValue\" : 5\n      },\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2004-01-01\",\n      \"endCoverage\" : \"2001-02-01\"\n      }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\" : {\n      \"id\" : \"<n>\"\n      },\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoValue",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0c08ed8-28fc-46cc-af2b-39625dbe4616",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": {{custom-providerid}},\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n    \t\"isHidden\" : false\n      },\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Days\",\n      \"embargoValue\" : -1\n      },\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-01\",\n      \"endCoverage\" : \"2004-02-01\"\n      }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\" : {\n      \"id\" : \"<n>\"\n      },\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoUnit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b081502e-2257-4d61-a66c-73b38b1a0137",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": {{custom-providerid}},\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n    \t\"isHidden\" : false\n      },\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"minutes\",\n      \"embargoValue\" : 5\n      },\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-01\",\n      \"endCoverage\" : \"2004-02-01\"\n      }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\" : {\n      \"id\" : \"<n>\"\n      },\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid visibilityData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4aabfc91-c964-48fd-8700-7b3b3df15b35",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": {{custom-providerid}},\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n    \t\"isHidden\" : \"invalid\"\n      },\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Months\",\n      \"embargoValue\" : 5\n      },\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-01\",\n      \"endCoverage\" : \"2004-02-01\"\n      }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\" : {\n      \"id\" : \"<n>\"\n      },\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4aabfc91-c964-48fd-8700-7b3b3df15b35",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": {{custom-providerid}},\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n    \t\"isHidden\" : false\n      },\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Months\",\n      \"embargoValue\" : 5\n      },\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-01\",\n      \"endCoverage\" : \"2004-02-01\"\n      }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\" : {\n      \"id\" : \"<n>\"\n      },\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"userDefinedField3\" : \"*****************************************************************************************************\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update managed resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8e1c9ae0-815e-4ed7-a25f-3296f32487b6",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custome embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{managed-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"titleId\": \"{{managed-titleid}}\",\n      \"name\": \"ABC of Diabetes (ABC Series)\",\n      \"providerId\": \"{{custom-providerid}}\",\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"customEmbargoPeriod\": {\n        \"embargoUnit\": \"Months\",\n        \"embargoValue\": 5\n      },\n      \"customCoverages\": [\n        {\n          \"beginCoverage\": \"2001-01-01\",\n          \"endCoverage\": \"2004-02-01\"\n        }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n      \"publisherName\": \"Wiley-Blackwell\",\n      \"edition\": \"\",\n      \"publicationType\": \"Book\",\n      \"subjects\": [\n        {\n          \"subject\": \"MEDICAL / Endocrinology & Metabolism\",\n          \"type\": \"BISAC\"\n        }\n      ],\n      \"contributors\": [\n        {\n          \"type\": \"author\",\n          \"contributor\": \"Kumar, Sudhesh\"\n        },\n        {\n          \"type\": \"author\",\n          \"contributor\": \"Watkins, Peter J.\"\n        },\n        {\n          \"type\": \"author\",\n          \"contributor\": \"Holt, Tim A.\"\n        }\n      ],\n      \"identifiers\": [\n        {\n          \"id\": \"978-1-4051-7784-9\",\n          \"subtype\": \"Print\",\n          \"type\": \"ISBN\"\n        },\n        {\n          \"id\": \"978-1-118-68486-3\",\n          \"subtype\": \"Online\",\n          \"type\": \"ISBN\"\n        },\n        {\n          \"id\": \"978-1-282-46121-5\",\n          \"subtype\": \"Online\",\n          \"type\": \"ISBN\"\n        },\n        {\n          \"id\": \"978-1-4443-1697-1\",\n          \"subtype\": \"Online\",\n          \"type\": \"ISBN\"\n        }\n      ],\n      \"isPeerReviewed\": false,\n      \"isTitleCustom\": false,\n      \"description\": \"\",\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n      \n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in custom package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a7c53527-ac95-41d1-bc8e-61c912de678e",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eq(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"name\": \"Update a managed title name\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"url\": \"https://test\",\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\" : false\n      },\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in managed package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da14ec73-71ad-4cad-9f15-629abd7a7178",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eql(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"name\": \"Update a managed title name 2\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"url\": \"https://test\",\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\" : false\n      },\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-title-package-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update managed resource invalid JSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ec14829b-a960-4136-84e2-1deddbe8b044",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": false,\n      \"visibilityData\": null,\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource coverageStatement if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5aa881bf-7b84-42cb-b32f-8785a2778a43",
														"exec": [
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\":null,\n      \"customCoverages\" : [],\n      \"coverageStatement\": \"{{long-coverage}}\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource embargo if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a613b6e5-8cec-4a5a-aeff-eb65a0dc0b7f",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Weeks\",\n      \"embargoValue\" : -1\n      },\n      \"customCoverages\" : []\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom coverage if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6cc1289b-9084-40e4-8eac-a9365d32956d",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid beginCoverage\");",
															"    pm.expect(jsonData.errors[0].detail).to.equal(\"beginCoverage has invalid format. Should be YYYY-MM-DD\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n        \"beginCoverage\" : \"200\",\n    \t\"endCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource visibility if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5c76e40f-fdf1-4350-bfea-86d0169ddf27",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"visibilityData\": {\n    \t\"isHidden\" : \"invalid\"\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5c76e40f-fdf1-4350-bfea-86d0169ddf27",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4f66110c-22c5-4c48-94f8-b1f133aada9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n\t  \"userDefinedField3\" : \"*****************************************************************************************************\",\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bf0b9cf5-95df-4112-bfa3-8703aea6d96e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7038e48d-bc8f-4e65-b4f4-62e25dd5ccd3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update resource tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfd8e1ba-9886-4d30-86d1-283899a48f28",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update resource tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfd8e1ba-9886-4d30-86d1-283899a48f28",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "delete tags for particular record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da9aa97a-0960-49ba-bbd2-6508a359e72f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
													"});",
													"",
													"//Test that type is tags",
													"pm.test('type is tags', function(){",
													"    pm.expect(response.data.type).eq('tags');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
													"});",
													"",
													"//Test that name matches name provided in request",
													"pm.test('name matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
													"});",
													"",
													"//Check that tagList contains correct tags",
													"pm.test('Existing tags', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) === 1;",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"test tag\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"test tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}",
												"tags"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc54df14-4680-4c4e-b726-18a590eeb645",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7834655a-45ef-4ef2-b79d-b3ef66dd4bf7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources DELETE specific resource (custom title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22815cc7-1496-4d67-be53-94903b30ca04",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45f32dce-cbcf-4576-9939-6c9fbedd8fee",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources DELETE previously deleted resource id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5418623e-d148-449c-bd8a-7f3602cb3676",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"   pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE managed title in managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecac0a9f-abcd-4bfa-ac28-717d4d178cfb",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource cannot be deleted\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Resource is not in a custom package\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-title-package-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45934211-b5ce-49bd-bb22-085eba00cb63",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"  pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resources by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0116162-80a9-4d6c-b85b-52e9b7e71c7f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is resources",
													"        pm.test('type is resources', function() {",
													"            pm.expect(firstRecord.type).eq('resources');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", ",
													"            \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\", \"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\", \"visibilityData\", \"managedCoverages\", \"customCoverages\");",
													"        });",
													"        ",
													"        //Test that packageId matches what we passed in ",
													"        pm.test('packageId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.packageId).to.eq(pm.variables.get('packageId'));",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"title\", \"provider\", \"package\");",
													"        });",
													"    ",
													"        //Test that title is not included in relationships",
													"        pm.test('relationships meta should not include title', function() {",
													"            pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that package is not included in relationships",
													"        pm.test('relationships meta should not include package', function() {",
													"            pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No resources found for this package');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0116162-80a9-4d6c-b85b-52e9b7e71c7f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    //Get the first record",
													"    let firstRecord = response.data[0];",
													"    ",
													"    //Test that type is resources",
													"    pm.test('type is resources', function() {",
													"        pm.expect(firstRecord.type).eq('resources');",
													"    });",
													"    ",
													"    //Test that data.attributes has expected attributes",
													"    pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"    });",
													"    ",
													"    ",
													"    pm.test('userDefinedFields are correct', function() {",
													"        pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(firstRecord.attributes.userDefinedField3).eq(\"test 3\");",
													"        pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d504b5b-cd53-450d-9e0b-bc7383d8ee3e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fc407a0-f0a4-4f01-9b56-ee07d29089ca",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId and providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d8d3807-44fe-49d2-b1ae-96b4f6d39d76",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "13f98e77-bdc3-423c-9480-2ca29433f0d2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "187dccd0-3dbf-4f1e-83a7-7ca132a4955a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "914c45aa-bf6b-4430-8df3-2578c671792b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "60e7852f-1e8c-4858-828a-0cd09b7f0159",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "GET title collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles query only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cd772e4-2fa5-4203-b679-c4c5850e11f4",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"        ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"            ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"        ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"        ",
													"    // Test that first title contains search term",
													"    pm.test('title name in first result includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with name sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65537d6c-bd16-479c-9583-541d97345213",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"    ",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Save first id to compare with a relevance sort result -- the 2 should be different",
													"    pm.environment.set(\"name-sort-id1\", firstRecord.id);",
													"} else {",
													"    console.log(\"Sample Title Query with name sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with relevance sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc608305-4ffe-41ce-ae41-b38a457e0a56",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Test that first sorted by relevance title id does not equal name sort title id",
													"    pm.test('first title name does not equal first title in relevance sort', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"} else {",
													"     console.log(\"Sample Title Query with relevance sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=relevance",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "relevance"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d262807-1459-4158-bd98-a931e05a0da8",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[publisher]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb54ac1e-9ac2-4de5-8fa5-da08e95852ca",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"data array contains the default (25) entries\", function () {",
													"    pm.expect(jsonData.data.length).to.eql(25);",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publisherName.toLowerCase()).to.include('academic');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[publisher] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[publisher]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[publisher]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[subject]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44353c09-88c9-4d8e-b02d-dfb09ab51b8e",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingSubjects = [];",
													"        jsonData.data.filter(",
													"            function(item){",
													"                item.attributes.subjects.filter(",
													"                    function(subject) {",
													"                        if (subject.subject.toLowerCase().includes('history')) {",
													"                            matchingSubjects.push(subject.subject);",
													"                        }",
													"                    }",
													"                );",
													"            }",
													"        );",
													"    ",
													"    pm.test('at least 1 subject includes query term', function() {",
													"        pm.expect(matchingSubjects.length).to.be.above(0);",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[subject] returned 0 results\");",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[subject]=history",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[subject]",
													"value": "history"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6adfa27-8b3f-4ad6-9342-23df192d48b6",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingIdentifiers = firstAttributes.identifiers.filter(",
													"        function(identifier) {",
													"            if (identifier.id.toLowerCase().includes('99')&&(['issn', 'isbn'].includes(identifier.type.toLowerCase()))) {",
													"               return identifier.id;",
													"            }",
													"        }",
													"    );",
													"    ",
													"    pm.test('at least 1 issn or isbn identifier includes query term', function() {",
													"        pm.expect(matchingIdentifiers.length).to.be.above(0);",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Title Query with filter[isxn] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter for no results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9c401d-53f8-4575-bb11-f6171ad18064",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[type]&filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9c401d-53f8-4575-bb11-f6171ad18064",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9c401d-53f8-4575-bb11-f6171ad18064",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged title', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    pm.expect(titleIds).to.include(taggedTitleId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with multiple tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5093735e-db40-44e6-9b13-0b792c5ffb4e",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type' header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged titles', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    let taggedCustomTitleId = pm.environment.get('custom-resourceid-from-setup').split('-')[2];",
													"    pm.expect(titleIds).to.include.all.members([taggedTitleId,taggedCustomTitleId]);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}},test tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}},test tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9c401d-53f8-4575-bb11-f6171ad18064",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    console.log(firstAttributes);",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response has 1 title', function() {",
													"    pm.expect(jsonData.data.length).eq(1);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}},test tag&count=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}},test tag"
												},
												{
													"key": "count",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88bea403-5810-4a2d-82ea-7568274e8ca7",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    // Test that first title on page 2 does not have same id as first title on page 1 ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Titles Query with paging returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles no parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6f562a8-86ca-4c03-9f90-b6b1680bd5d9",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73102646-9cb4-4aed-abf5-fe5ba7c474f7",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Value of required parameter filter[name], filter[isxn], filter[subject] or filter[publisher] is missing.\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query with sort only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "213a9dd2-d3b4-4df9-bf3f-396242a81c0f",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn] &filter[name] conflicting filter parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23a2d1bc-3fc3-44b7-b16c-39978805fe68",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Conflicting filter parameters\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99&filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												},
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid too large",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "128df029-200f-4b3e-af8c-70653e68064d",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"2147483648\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2147483648&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2147483648"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88f604bb-acb4-48b0-9007-82c9415753c5",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"\\n 'page' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 1\");",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=-1&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid non numeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05b44e5f-0b04-4e3f-9250-b8dfb2fd3b50",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"a\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=a&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "a"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET title by  titleid",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles GET specific title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3270e35d-fe35-48ac-bcec-8cf721433ed4",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "183890ea-c4e7-432e-9b1b-8fee2bc8dd8f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.data.length).to.be.above(0);",
													"});",
													"",
													"if (relationships.resources.data.length > 0) {",
													"    pm.test(\"data array contains the default entries\", function () {",
													"        pm.expect(relationships.resources.data[0].type).to.eql(\"resources\");",
													"    });",
													"} else {",
													"      console.log(\"Sample Titles GET byId including resources returned 0 relationships\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "183890ea-c4e7-432e-9b1b-8fee2bc8dd8f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"pm.test(\"included resource with tags\", function () {",
													"    let taggedCustomResourceId = pm.environment.get('custom-resourceid-from-setup');",
													"    let taggedResource = jsonData.included.filter(resource => resource.id === taggedCustomResourceId)[0];",
													"    pm.expect(taggedResource.attributes.tags.tagList).to.include(\"test tag\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2ee2111-c9c1-41d8-a7de-1d68c7042f1a",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-with-tags}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-with-tags}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "183890ea-c4e7-432e-9b1b-8fee2bc8dd8f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(jsonData.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(jsonData.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (jsonData.included === undefined || jsonData.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let resourceWithLabels = jsonData.included.filter(resource => resource.id === pm.environment.get(\"custom-resourceid-from-setup\"))[0];",
													"            pm.expect(resourceWithLabels.type).to.eq('resources');",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField3).eq(\"test 3\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2ee2111-c9c1-41d8-a7de-1d68c7042f1a",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources bad value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "276577e6-cded-4a32-9797-6086ba1fa369",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.meta.included).to.be.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=badValue",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "badValue"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles GET non existing title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d50afa21-71aa-4a20-9954-920d1c5f1bb1",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles POST valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1013b68d-56e8-4139-8343-66034e0e2a4d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"edition\", \"description\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"title name is as expected\", function () {",
													"    pm.expect(firstAttributes.name).eq(\"custom title-\" + pm.variables.get(\"custom-title-uuid\"));",
													"});",
													"",
													"pm.test(\"publisher name is as expected\", function () {",
													"    pm.expect(firstAttributes.publisherName).eq(\"test publisher\");",
													"});",
													"",
													"pm.test(\"isTitleCustom is true\", function () {",
													"    pm.expect(firstAttributes.isTitleCustom).eq(true);",
													"});",
													"",
													"pm.test(\"subjects are as expected\", function () {",
													"   pm.expect(firstAttributes.subjects).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"identifiers are as expected\", function () {",
													"   pm.expect(firstAttributes.identifiers).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.identifiers.length).to.eql(1);",
													"   pm.expect(firstAttributes.identifiers[0].id).to.eql(\"11-2222-3333\");",
													"   pm.expect(firstAttributes.identifiers[0].type).to.eql(\"ISSN\");",
													"   pm.expect(firstAttributes.identifiers[0].subtype).to.eql(\"Online\");",
													"});",
													"",
													"pm.test(\"publicationType is as expected\", function () {",
													"   pm.expect(firstAttributes.publicationType).to.eql(\"Database\");",
													"});",
													"",
													"pm.test(\"edition is as expected\", function () {",
													"   pm.expect(firstAttributes.edition).to.eql(\"test edition\");",
													"});",
													"",
													"pm.test(\"description is as expected\", function () {",
													"   pm.expect(firstAttributes.description).to.eql(\"test description\");",
													"});",
													"",
													"pm.test(\"isPeerReviewed is as expected\", function () {",
													"   pm.expect(firstAttributes.isPeerReviewed).to.eql(true);",
													"});",
													"",
													"pm.test(\"contributors are as expected\", function () {",
													"   pm.expect(firstAttributes.contributors).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.contributors.length).to.eql(2);",
													"   pm.expect(firstAttributes.contributors[0].type.toLowerCase()).to.eql(\"author\");",
													"   pm.expect(firstAttributes.contributors[0].contributor).to.eql(\"smith, john\");",
													"   pm.expect(firstAttributes.contributors[1].type.toLowerCase()).to.eql(\"illustrator\");",
													"   pm.expect(firstAttributes.contributors[1].contributor).to.eql(\"smith, ralph\");",
													"});",
													"",
													"",
													"",
													"const getResourceRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/resources/' + pm.variables.get(\"custom-packageid\") + \"-\" + jsonData.data.id,",
													"  method: 'GET',",
													"  header: {",
													"    'Content-Type' : 'application/vnd.api+json',",
													"    'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"    'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"      ",
													"  },",
													"};",
													"pm.sendRequest(getResourceRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    attributes = res.json().data.attributes;",
													"    pm.test('userDefinedFields are as expected', function(){",
													"        pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
													"        pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"});",
													"",
													"//Check that tagList is empty",
													"pm.test('TagList is empty', function(){",
													"    pm.expect(firstAttributes.tags.tagList.size) === 0;",
													"});",
													"",
													"// Store custom title id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-titleid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97833a0d-7005-4cd7-bed1-a0c344bd4178",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"title-tag\"\n\t\t\t]\n    \t},\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"test 3\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles POST provider not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d35a77c-a1d8-4da9-8456-59a4d0c9924a",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Provider not found\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"1-1\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST duplicate title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb331868-000c-41dd-b46b-344f966fe15a",
												"exec": [
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "477b1940-5ac4-4b24-abe7-eeb5d36016ca",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2b36c6f-bc7d-47ae-9344-92c064c66d6d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "738d90ee-4d4c-4d99-8175-bf1d34ff9d3b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18562801-31c0-43d5-8b4d-ac212ec7b23f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST non existing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "667a70dd-fa5a-4b12-bc74-5921146cbb19",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1f794335-7350-4a92-b7b5-96c48b771674",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-pubtype-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-pubtype-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"badpubtype\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0bb3470-357f-4091-bd65-4ae98776525f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.expect(pm.response.reason()).to.equal(\"Unprocessable Entity\")",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Missing resource\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  }\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a72da0dc-901f-4dee-88ca-082e91694c6f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST cannot add custom title to managed resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2cc4ffd-4a61-46e1-a804-7411520c5c45",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Cannot create custom title because Customer is not the Provider\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{managed-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34cb3c66-bfc6-421e-8980-7b26df489dae",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "804f6479-87c9-4974-bc53-03f4ed31fcda",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid isPeerReviewed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0efc105-bc87-4095-96e4-3338f8e9b9bd",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cfef79da-57f6-44a2-b37b-02c9f8a49c05",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": \"badvalue\",\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fe9ada8-6ba4-4ef5-8ad2-d4e90736f5c0",
												"exec": [
													"",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Edition is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c81dba8-4d5a-4494-871d-80120865624b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"{{long-edition}}\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c7eeba6-0fe4-44d4-b59e-c755027f1f7f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "42d7a5ff-16e6-4425-89a9-7f1603c75b4a",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"{{long-description}}\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid contributor type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f4015b7-36d0-411d-8e41-0fc55458d3c0",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Parameter contributorsList.contributorType must be one of (author, editor, illustrator).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "45601148-2418-415b-8242-01f88ba4e2ee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n       {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        }\n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1aad4c8b-fb38-49f7-9615-cb8842b799d9",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function() {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function() {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function() {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function() {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "083165f5-6ca5-41aa-af1b-f6523f42799d",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-identifier\", toRepeat.repeat(21));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\":\"{{long-identifier}}\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bf09e7-da92-43bc-a263-481569e96bbb",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c3f551f-df24-43a9-92dc-4f7e0386f4ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44ca0f42-3739-4491-89d5-889b73115164",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c3f551f-df24-43a9-92dc-4f7e0386f4ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"invalidtype\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7d72877-8b9a-4b28-af26-50f3ebb07fbb",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c3f551f-df24-43a9-92dc-4f7e0386f4ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"invalidsubtype\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update title with adding tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a732e96b-0d5f-4a02-965f-03b344b61904",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is titles",
													"pm.test('type is titles', function(){",
													"    pm.expect(response.data.type).eq('titles');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\",\"publicationType\", \"publisherName\",",
													"    \"isPeerReviewed\", \"edition\", \"contributors\", \"identifiers\", \"tags\");",
													"});",
													"",
													"//Test that publicationType matches as provided in request",
													"pm.test('publicationType matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publicationType).to.eq(\"Database\");",
													"});",
													"",
													"//Test that publisherName matches provided in request",
													"pm.test('publisherName matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publisherName).to.eq(\"test publisher\");",
													"});",
													"",
													"//Test that isPeerReviewed is true",
													"pm.test('isPeerReviewed is true', function() {",
													"    pm.expect(response.data.attributes.isPeerReviewed).to.be.true;",
													"});",
													"",
													"//Check that tagList is not empty",
													"pm.test('TagList is not empty', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
													"});",
													"",
													"//Check that tag in tagList matches with value",
													"pm.test('Creating tagList', function(){",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"foo-tag\"\n\t\t\t]\n    \t}\n\t}\n\t}\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles PUT update custom title missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "387aa985-9032-414b-8639-8b7f40af3cd6",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// Error text as returned from rm api",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.eq(\"Invalid Identifier id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73d82c84-122a-4314-bbe2-6bbdb34e982b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdabde56-3342-4cb6-be9b-d4ab6263ec43",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73d82c84-122a-4314-bbe2-6bbdb34e982b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Invalid\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b9f34c9-13fc-4d2a-bf8d-d832abc23fe0",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73d82c84-122a-4314-bbe2-6bbdb34e982b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"Invalid\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid contributor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49155118-e9a1-4cd7-93b6-b32fc69a0dfc",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute Type is invalid.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73d82c84-122a-4314-bbe2-6bbdb34e982b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f37c0de8-9541-43aa-b595-625a0a492564",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73d82c84-122a-4314-bbe2-6bbdb34e982b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"{{long-description}}\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "948f47fb-e735-417d-b1fc-db046d626ae2",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f157005-53de-4726-a829-dd42d8c07e5a",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"{{long-edition}}\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e1c43ce-df97-47ca-a556-e0a05814426e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92cc3d10-9a96-4ff8-8496-9e38fce73d61",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b02569ca-d848-4cfa-832d-86d223bd82bf",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cfb66a4-95f6-428b-9e9f-210f3a44060e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"invalid\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid peer review",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ccbd802-3237-4606-a6cb-12922a7232ca",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22f85bb4-90b8-45c4-bde8-b1b246236656",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": \"invalid\",\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title duplicate title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1f761a8-63c0-416d-8959-ad7ef26a3188",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22f85bb4-90b8-45c4-bde8-b1b246236656",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{custom-titlename-for-resource-duplicate}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title Invalid name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d191ee7-6250-41c2-b873-b393fc52f0c5",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22f85bb4-90b8-45c4-bde8-b1b246236656",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5c867319-2a6e-4401-a5f4-ae53893d37d1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b6d29d8-125b-42f0-8423-ddd83f0b137c",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_titleData.json\", JSON.parse(pm.variables.get(\"schema_titleData\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_titles.json\", JSON.parse(pm.variables.get(\"schema_titles\")));",
							"tv4.addSchema(\"schema_titleListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_titleListDataAttributes\")));",
							"tv4.addSchema(\"schema_metaIncluded.json\", JSON.parse(pm.variables.get(\"schema_metaIncluded\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "configuration",
			"item": [
				{
					"name": "GET Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Delete Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1999127b-87cf-45b8-a245-be854e138af4",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-url-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1999127b-87cf-45b8-a245-be854e138af4",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-key-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1999127b-87cf-45b8-a245-be854e138af4",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-customer-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Run tests",
									"item": [
										{
											"name": "GET Configuration - when configuration is not configured",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
														"exec": [
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
															"});",
															"",
															"//Test that id is configuration",
															"pm.test('id is configuration', function(){",
															"    pm.expect(response.data.id).eq('configuration');",
															"});    ",
															"",
															"//Test that type is configurations",
															"pm.test('type is configurations', function(){",
															"    pm.expect(response.data.type).eq('configurations');",
															"});",
															"    ",
															"//Test that default value for rmapiBaseUrl is returned",
															"pm.test('rmapiBaseUrl is returned with default value', function(){",
															"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(\"https://sandbox.ebsco.io\");",
															"});",
															"",
															"//Test apiKey is missing when it is not configured",
															"let apiKey = \"****************************************\";",
															"pm.test('apiKey is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"apiKey\");",
															"});",
															"",
															"//Test that customerId is missing when it is not configured",
															"let custid = pm.environment.get(\"rm-api-custid-value\");",
															"pm.test('customer id is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"custid\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"configuration"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reset Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23f25d7b-cbf3-4053-9fc3-35f06a3fffcc",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-url-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-url-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "732d3a7c-3a6f-4f9b-b904-9cc6887ccdc3",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-key-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-key-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23f25d7b-cbf3-4053-9fc3-35f06a3fffcc",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-customer-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-customer-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get RM API Url id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cf60b97-d5e9-4028-86ff-9b20ecc32dba",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API apiKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30b0b57f-a25a-41b2-9390-f1e72c241b4c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-key-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT Configuration - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"not a customer id\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when api key is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"not an apikey\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"not a url\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when all fields are empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"\",\n            \"apiKey\": \"\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when fields are missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"// The schema does not validate for PUT request",
													"// Check after https://issues.folio.org/browse/UIEH-575 is addressed",
													"pm.test.skip(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test.skip('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Configuration is invalid');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when json is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed."
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        },\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "337ade19-244e-4597-8a6d-c8a1de329907",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4252e3db-a250-4e0f-b8f4-622b0e587b82",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_configurationData.json\", JSON.parse(pm.variables.get(\"schema_configurationData\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_configurationAttributes.json\", JSON.parse(pm.variables.get(\"schema_configurationAttributes\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "status",
			"item": [
				{
					"name": "GET status",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Status - when status is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is true', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT invalid RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"not a url\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when api url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"invalid id\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"invalid api key\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when apiKey is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a70846a7-b877-44cb-88a4-934347a52a7d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "72ba6ebc-ac5d-407c-8242-50385a5d444c",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_statusData.json\", JSON.parse(pm.variables.get(\"schema_statusData\")));",
							"tv4.addSchema(\"schema_statusAttributes.json\", JSON.parse(pm.variables.get(\"schema_statusAttributes\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "proxy",
			"item": [
				{
					"name": "GET proxy-types",
					"item": [
						{
							"name": "Get proxies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Check that content-type is application/vnd.api+json",
											"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
											"      pm.response.to.have.header(\"Content-Type\");",
											"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyTypes\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check data array is of type providers if not null",
											"if(response.data) {",
											"    let len = response.data.length;",
											"    if(len > 0){",
											"        //Get first record",
											"        let firstRecord = response.data[0];",
											"        //Test that type is proxyType",
											"        pm.expect(firstRecord.type).eq('proxyTypes');",
											"",
											"        //Test that object has the expected keys",
											"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
											"         ",
											"         //Test that data.attributes has expected attributes",
											"        pm.test('expected data.attributes are present', function() {",
											"        pm.expect(firstRecord.attributes).to.be.an('object');",
											"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
											"        });",
											"    } else {",
											"        console.log(\"No Proxy types exist\");",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/proxy-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"proxy-types"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6466aa35-b5d3-4f29-ab0a-7d7f13e0c1c4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd884adc-9e64-4147-89ee-5ee0b9cfbfb9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET root-proxy",
					"item": [
						{
							"name": "GET root proxy when root proxy is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
											"});",
											"",
											"//Test that id is root-proxy",
											"pm.test('id is root-proxy', function(){",
											"    pm.expect(response.data.id).eq('root-proxy');",
											"});    ",
											"",
											"//Test that type is rootProxies",
											"pm.test('type is rootProxies', function(){",
											"    pm.expect(response.data.type).eq('rootProxies');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.key(\"id\");",
											"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
											"});",
											"",
											"//Test that data.attributes.id is root-proxy",
											"pm.test('expected data.attributes.id is root-proxy', function(){",
											"    pm.expect(response.data.attributes.id).eq('root-proxy');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"root-proxy"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2eb20431-8c76-4337-9d9d-b920f488aea8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e9fabf1-5cd7-4dca-a76c-0f70664c2e57",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT root-proxy",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT root proxy when root proxy is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"<n>\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update root proxy with invalid proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"invalid\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy without proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.error;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].title).to.eq('Invalid proxy id');",
													"    pm.expect(response.errors[0].detail).to.eq('proxyTypeId cannot be null');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy without attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.error;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].message).to.eq('may not be null');",
													"    pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes');",
													"    pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxie\"\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"invalid\",\n      \"proxyTypeId\": \"invalid\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy without id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"proxyTypeId\": \"invalid\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c317662c-c310-4b8f-8b93-8002175de0f0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "97743cb6-3e09-4a4d-9d72-3f2e347b29ce",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_proxyTypesData.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesData\")));",
							"tv4.addSchema(\"schema_proxyTypesDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesDataAttributes\")));",
							"tv4.addSchema(\"schema_rootProxyData.json\", JSON.parse(pm.variables.get(\"schema_rootProxyData\")));",
							"tv4.addSchema(\"schema_rootProxyDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_rootProxyDataAttributes\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "GET tags collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7535d89f-ea29-4c2a-b43f-9665164c2643",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"value\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute type",
													"        pm.test('expected data.attributes type is present', function() {",
													"            pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationship is present', function() {",
													"            pm.expect(firstRecord.relationships.record).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"record\")",
													"        });",
													"    } else {",
													"        console.log('No tags found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											]
										}
									},
									"response": []
								},
								{
									"name": "with all rectypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb98be54-cc50-4a39-90f8-f5f8094aa6aa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider&filter[rectype]=package&filter[rectype]=title&filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												},
												{
													"key": "filter[rectype]",
													"value": "package"
												},
												{
													"key": "filter[rectype]",
													"value": "title"
												},
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to providers', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to packages', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is a string",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to titles', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to resources', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid filter(all rectypes)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[r=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[r",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid \\'filter[rectype]\\' parameter value: providers. Possible values: provider, package, title, resource');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "providers"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "71ef9deb-34a3-4b6d-9b02-5abbb8150b00",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4be400b7-c33e-43e7-9acf-f93cf85f42bd",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_tagRelationships.json\", JSON.parse(pm.variables.get(\"schema_tagRelationships\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_tagCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_tagCollectionItem\")));",
							"tv4.addSchema(\"schema_tagCollection.json\", JSON.parse(pm.variables.get(\"schema_tagCollection\")));",
							"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));",
							"tv4.addSchema(\"schema_tagDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_tagDataAttributes\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "custom-labels",
			"item": [
				{
					"name": "GET collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET custom labels collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is customLabel",
													"        pm.expect(firstRecord.type).eq('customLabel');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\", \"displayOnPublicationFinder\");",
													"        });",
													"    } else {",
													"        console.log(\"No Custom Labels exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT custom-labels with one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
													"    pm.expect(firstRecord.type).eq('customLabel');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT custom-labels with five items",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test('expected size', function () {",
													"    pm.expect(jsonData.data.length).eq(5);",
													"})",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
													"    pm.expect(firstRecord.type).eq('customLabel');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test 2 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 3,\n                \"displayLabel\": \"test 3 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 4,\n                \"displayLabel\": \"test 4 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 5,\n                \"displayLabel\": \"test 5 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT /custom-labels with id not in range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label id should be in range 1 - 5\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 6,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": -1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid name length",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label Name is too long (maximum is 50 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid full text finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": null,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid publication finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": null\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with duplicate ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e822abd-f4a8-4dcb-a8db-27df2304403c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Each label in body must contain unique id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        },\n        {\n            \"type\": \"customLabel\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf8f236b-11e8-48c0-8734-96f543a99906",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7093318-8178-4677-ae8d-090b75586a88",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "154bf7cc-8965-456a-b47f-57ad460848a4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "28bf52b7-427a-42c5-bc00-c6c3f587ede7",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_customLabelsCollection.json\", JSON.parse(pm.variables.get(\"schema_customLabelsCollection\")));",
							"tv4.addSchema(\"schema_customLabelCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_customLabelCollectionItem\")));",
							"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
							"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tear-down",
			"item": [
				{
					"name": "tear-down tags test",
					"item": [
						{
							"name": "Delete tags for provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755715d4-a377-454c-94d8-b3581049aba4",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Tag list is empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for second provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755715d4-a377-454c-94d8-b3581049aba4",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "266c1544-d736-4b44-8b8e-53d87301e84e",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"//Check that tagList is empty in response",
											" pm.test(\"Package with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"tags\",\n     \"attributes\": {\n       \"name\": \"new-custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\",\n       \"tags\": {\n    \t\"tagList\": [\n\t\t\t]\n    \t}\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bafb2d0f-7c26-4bfa-af03-37aba39bf53f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d64b893-a28c-4fe4-ac71-2c929999c39b",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test titles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bafb2d0f-7c26-4bfa-af03-37aba39bf53f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d64b893-a28c-4fe4-ac71-2c929999c39b",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": []\n    \t}\n\t}\n\t}\n}\n        "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{custom-titleid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bafb2d0f-7c26-4bfa-af03-37aba39bf53f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d64b893-a28c-4fe4-ac71-2c929999c39b",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-title-package-resourceid}}\",\n      \"tags\": {\n        \"tagList\": [\n        ]\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom package created for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967dd204-5352-4475-940d-0d16f2b81eee",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a2e4070d-07dd-4ddf-a0f1-663dc979f449",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e0728cf-2a74-4cf3-bc18-cbd58cc45df9",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down resources test",
					"item": [
						{
							"name": "Delete Custom resource with tags (custom title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78113024-bef8-49df-afd5-77dccb10d5fb",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967dd204-5352-4475-940d-0d16f2b81eee",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-for-resource}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-for-resource}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						},
						{
							"name": "Delete Custom Package (created for resource tags)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5872668c-ae2d-4644-8b2c-9c56952cd23b",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Resource created for test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ef3a28d-ba01-48c0-bc56-129a2cf33043",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-packageid}}-{{custom-titleid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-packageid}}-{{custom-titleid-from-setup}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for resource testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2aff0ec-6089-4e7d-b3bf-7803ac05390d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80be542a-4821-49a5-b810-4b30cfd2d93a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down packages",
					"item": [
						{
							"name": "Delete custom package created in post 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967dd204-5352-4475-940d-0d16f2b81eee",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-valid1}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Delete custom package created in post 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967dd204-5352-4475-940d-0d16f2b81eee",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-valid2}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Deselect partially selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967dd204-5352-4475-940d-0d16f2b81eee",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Test that data.attributes has expected attributes",
											"pm.test(\"titles in package were deselected\", function() {",
											"    pm.expect(response.data.attributes.selectedCount).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{partially-selected-package-id}}\",\r\n    \"type\": \"packages\",\r\n    \"attributes\": {\r\n      \"isCustom\": false,\r\n      \"isSelected\": false\r\n\t}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b47a327f-3526-4755-976f-483cadd0aeed",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69ec6322-e5c9-41a7-9a75-b38840d01fac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down titles test",
					"item": [
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967dd204-5352-4475-940d-0d16f2b81eee",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for custom titles testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2aff0ec-6089-4e7d-b3bf-7803ac05390d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80be542a-4821-49a5-b810-4b30cfd2d93a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down access-type test",
					"item": [
						{
							"name": "DELETE second access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down configuration",
					"item": [
						{
							"name": "Check if configuration RM API url exists and should delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebc0ca22-5260-42d7-b578-c8ff1a2fe889",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"let apiUrlExists = pm.environment.get(\"apiUrlExists\");",
											"if((jsonData !==null && jsonData.configs.length >0) && apiUrlExists) {",
											"    //Api url previously existed -- DO NOT DELETE (end execution)",
											"    postman.setNextRequest(\"Check if configuration RM API customerid exists and should delete\");",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e850480-32fc-4384-92fb-1faf179e993b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM API api_credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45e87c73-961f-4262-973c-e6b5d8acac73",
										"type": "text/javascript",
										"exec": [
											"//Clean-up RM API Key configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries",
										"{{rm-api-url-id}"
									]
								},
								"description": "Clean-up RM-API Key configuration"
							},
							"response": []
						},
						{
							"name": "Check if configuration RM API customerid exists and should delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7886c216-80c5-4093-8f4e-96d01b2cc90e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"let customerIdExists = pm.environment.get(\"customerIdExists\");",
											"if((jsonData !==null && jsonData.configs.length >0) && customerIdExists) {",
											"    //customer id previously existed -- DO NOT DELETE (end execution)",
											"    postman.setNextRequest(\"Reset Variables\");",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e850480-32fc-4384-92fb-1faf179e993b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM API customer id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45e87c73-961f-4262-973c-e6b5d8acac73",
										"type": "text/javascript",
										"exec": [
											"//Clean-up RM API Key configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries",
										"{{rm-api-customer-id}}"
									]
								},
								"description": "Clean-up RM-API Key configuration"
							},
							"response": []
						},
						{
							"name": "Check if configuration RM API apiKey exists and should delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f89139b1-5bc1-47f2-82e4-7dcaf0513b1f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"let apiKeyExists = pm.environment.get(\"apiKeyExists\");",
											"if((jsonData !==null && jsonData.configs.length >0) && apiKeyExists) {",
											"    //Api key previously existed -- DO NOT DELETE (end execution)",
											"    postman.setNextRequest(\"Reset Variables\");",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e850480-32fc-4384-92fb-1faf179e993b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM API Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45e87c73-961f-4262-973c-e6b5d8acac73",
										"type": "text/javascript",
										"exec": [
											"//Clean-up RM API Key configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries",
										"{{rm-api-key-id}}"
									]
								},
								"description": "Clean-up RM-API Key configuration"
							},
							"response": []
						},
						{
							"name": "Reset Variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93ea1def-f5f2-4d98-9571-99589b488730",
										"exec": [
											"//placeholder Reset Variables",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e4453a6-7061-4d96-90e2-f2eac533c754",
										"exec": [
											"// Reset all environment level variables that may have been setup in the tests",
											"pm.environment.unset(\"schema_jsonapi_content\");",
											"pm.environment.unset(\"apiUrlExists\");",
											"pm.environment.unset(\"rm-api-url-id\");",
											"pm.environment.unset(\"customerIdExists\");",
											"pm.environment.unset(\"rm-api-customer-id\");",
											"pm.environment.unset(\"apiKeyExists\");",
											"pm.environment.unset(\"rm-api-key-id\");",
											"pm.environment.unset(\"custom-providerid\");",
											"pm.environment.unset(\"custom-packageid\");",
											"pm.environment.unset(\"name-sort-id1\");",
											"pm.environment.unset(\"managed-packageid\");",
											"pm.environment.unset(\"custom-package-id-created-in-post\");",
											"pm.environment.unset(\"custom-package-id-created-in-post-again\");",
											"pm.environment.unset(\"custom-titlename-for-resource-duplicate\");",
											"pm.environment.unset(\"custom-packageid-for-resource\");",
											"pm.environment.unset(\"managed-titleid\");",
											"pm.environment.unset(\"managed-titlename\");",
											"pm.environment.unset(\"managed-title-package-resourceid\");",
											"pm.environment.unset(\"managed-resourceid\");",
											"pm.environment.unset(\"custom-resourceid\");",
											"",
											"pm.globals.unset(\"custom-package-name-that-exists\");",
											"",
											"pm.variables.unset(\"package-uuid\");",
											"pm.variables.unset(\"custom-title-uuid\");",
											"pm.variables.unset(\"custom-title-for-resource-uuid\");",
											"pm.variables.unset(\"custom-title-for-resource-uuid2\");",
											"pm.variables.unset(\"custom-package-for-resource-uuid\");",
											"pm.variables.unset(\"custom-title-pubtype-uuid\");",
											"pm.variables.unset(\"long-title-name\");",
											"pm.variables.unset(\"custom-title-pubtype-uuid\");",
											"pm.variables.unset(\"long-publisher-name\");",
											"pm.variables.unset(\"long-edition\");",
											"pm.variables.unset(\"long-description\");",
											"pm.variables.unset(\"long-identifier\");",
											"pm.variables.unset(\"packagename-pageone\");",
											"",
											"pm.variables.unset(\"rm-api-custid-value\");",
											"pm.variables.unset(\"rm-api-url-value\");",
											"pm.variables.unset(\"rm-api-key-value\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==KB_EBSCO and configName==api_credentials and code==kb.ebsco.credentials)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==KB_EBSCO and configName==api_credentials and code==kb.ebsco.credentials)"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1027eea9-68c4-48eb-8193-b4c405e8f182",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "352349d2-1dae-47f1-b9bd-bccbc161503d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down permission",
					"item": [
						{
							"name": "Delete permission if it was added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f89139b1-5bc1-47f2-82e4-7dcaf0513b1f",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(!pm.variables.get(\"permissionExists\")) {",
											"    jsonData.permissions = jsonData.permissions.filter(permission => (permission !== \"kb-ebsco.all\"));",
											"",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"X-Okapi-Token\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e850480-32fc-4384-92fb-1faf179e993b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "21b4e28c-2132-4a4a-96fa-0fe8a64acc4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6ef3c15a-a770-4829-a38a-ec45d1e6b7fc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ee1e49b4-3070-43e3-aaa4-9434d3ee7412",
			"key": "custid",
			"value": "apidvgvmt",
			"type": "string"
		},
		{
			"id": "1d7bedae-6782-4543-a2b4-f12096b3be6a",
			"key": "packageId",
			"value": "583-4345",
			"type": "string"
		},
		{
			"id": "62e1ab11-a156-470d-ada3-e4098d2fb9e7",
			"key": "rmapi_api_key",
			"value": "",
			"type": "string"
		},
		{
			"id": "96623104-f687-4d9f-8264-b4e149166825",
			"key": "rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		},
		{
			"id": "170c50b6-efd4-4c5f-9917-e2ebd867c987",
			"key": "default_rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}